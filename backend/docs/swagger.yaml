basePath: /api/
definitions:
  model.Competition:
    properties:
      date:
        type: string
      hostID:
        type: integer
      id:
        type: integer
      name:
        type: string
      overview:
        type: string
      scoreboardURL:
        type: string
    type: object
  model.Institution:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  model.User:
    properties:
      email:
        type: string
      id:
        type: integer
      institutionID:
        type: integer
      name:
        type: string
      overview:
        type: string
    type: object
  response.Response:
    properties:
      result:
        example: result description
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: ???
    name: NYCU archery
    url: https://github.com/NYCUarchery
  description: A gin server
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Archery backend API
  version: "1.0"
paths:
  /competition:
    get:
      description: get id, name, date, hostID, scoreboardURL, and overview only
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/model.Competition'
                  type: array
              type: object
      summary: get information of all the competitions
      tags:
      - competition
    post:
      consumes:
      - application/json
      description: create a competition and set the person as the host
      parameters:
      - description: competition name
        in: formData
        name: name
        required: true
        type: string
      - description: date
        in: formData
        name: date
        required: true
        type: string
      - description: a list of groups
        in: formData
        name: groups
        required: true
        type: string
      - description: overview
        in: formData
        name: overview
        type: string
      - description: Scoreboard URL
        in: formData
        name: scoreboardURL
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                id:
                  type: integer
              type: object
        "400":
          description: competition name exists | cannot parse date string | invalid
            info/groups
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: DB error
          schema:
            $ref: '#/definitions/response.Response'
      summary: create a competition
      tags:
      - competition
  /competition/{id}:
    get:
      description: get info, groups, participants of the competition
      parameters:
      - description: competition id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.Competition'
              type: object
        "400":
          description: empty/invalid competition id
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: no competition found
          schema:
            $ref: '#/definitions/response.Response'
      summary: get information of the competition
      tags:
      - competition
  /institution:
    get:
      consumes:
      - application/json
      description: get all institution info from db
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/model.Institution'
                  type: array
              type: object
        "500":
          description: db error
          schema:
            $ref: '#/definitions/response.Response'
      summary: get all institution info
      tags:
      - institution
    post:
      consumes:
      - application/json
      description: add an institution to db
      parameters:
      - description: institution's name
        in: formData
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: empty institution name
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: db error
          schema:
            $ref: '#/definitions/response.Response'
      summary: create an institution
      tags:
      - institution
  /institution/{id}:
    get:
      consumes:
      - application/json
      description: get institution info from db by id
      parameters:
      - description: institution's id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.Institution'
              type: object
        "400":
          description: invalid id
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: no institution found
          schema:
            $ref: '#/definitions/response.Response'
      summary: get institution info by id
      tags:
      - institution
  /participant/:
    post:
      consumes:
      - application/json
      description: add a particpant to the competition
      parameters:
      - description: competition id
        in: formData
        name: competitionID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: no user/competition found
          schema:
            $ref: '#/definitions/response.Response'
      summary: join in a competition
      tags:
      - participant
  /session:
    delete:
      description: delete the session
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/response.Response'
      summary: logout
      tags:
      - session
    post:
      consumes:
      - application/json
      description: get a session
      parameters:
      - description: user's name
        in: formData
        name: username
        required: true
        type: string
      - description: password
        in: formData
        name: password
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success | has loginned
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: wrong username or password
          schema:
            $ref: '#/definitions/response.Response'
      summary: login
      tags:
      - session
  /user:
    post:
      consumes:
      - application/json
      description: add a user to db
      parameters:
      - description: user's name
        in: formData
        name: username
        required: true
        type: string
      - description: password
        in: formData
        name: password
        required: true
        type: string
      - description: email
        in: formData
        name: email
        required: true
        type: string
      - description: overview
        in: formData
        name: overview
        type: string
      - description: institution ID
        in: formData
        name: institutionID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: username/email exists | empty username/password/email/institutionID
            | invalid info
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: db error
          schema:
            $ref: '#/definitions/response.Response'
      summary: register a user
      tags:
      - user
  /user/{id}:
    get:
      consumes:
      - application/json
      description: get a user's username, overview, and institution id
      parameters:
      - description: user's id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.User'
              type: object
        "400":
          description: empty/invalid user id
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: no user found
          schema:
            $ref: '#/definitions/response.Response'
      summary: get a user's information
      tags:
      - user
    put:
      consumes:
      - application/json
      description: modify username, password, overview, and institution_id
      parameters:
      - description: user's id
        in: path
        name: id
        required: true
        type: string
      - description: original password
        in: formData
        name: oriPassword
        required: true
        type: string
      - description: modified password
        in: formData
        name: modPassword
        type: string
      - description: modified email
        in: formData
        name: email
        type: string
      - description: modified overview
        in: formData
        name: overview
        type: string
      - description: modified institution ID
        in: formData
        name: institutionID
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: empty/invalid user id | invalid modified information
          schema:
            $ref: '#/definitions/response.Response'
        "403":
          description: cannot change other's info | wrong original password
          schema:
            $ref: '#/definitions/response.Response'
      summary: modify user's information
      tags:
      - user
  /user/me:
    get:
      description: get my uid in the session
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                id:
                  type: integer
              type: object
      summary: get my uid
      tags:
      - user
swagger: "2.0"
