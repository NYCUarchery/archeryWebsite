basePath: /api/
definitions:
  database.Competition:
    properties:
      current_phase:
        type: integer
      date:
        type: string
      elimination_is_active:
        type: boolean
      first_lane_id:
        type: integer
      groups:
        items:
          $ref: '#/definitions/database.Group'
        type: array
      groups_num:
        type: integer
      host_id:
        type: integer
      id:
        type: integer
      lanes_num:
        type: integer
      mixed_elimination_is_active:
        type: boolean
      no_type_group_id:
        type: integer
      qualification_is_active:
        type: boolean
      script:
        type: string
      sub_title:
        type: string
      team_elimination_is_active:
        type: boolean
      title:
        type: string
    type: object
  database.Group:
    properties:
      bow_type:
        type: string
      competition_id:
        type: integer
      group_index:
        type: integer
      group_name:
        type: string
      group_range:
        type: string
      id:
        type: integer
      player_num:
        type: integer
    type: object
  database.Institution:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  database.User:
    properties:
      email:
        type: string
      id:
        type: integer
      institutionID:
        type: integer
      name:
        type: string
      overview:
        type: string
    type: object
  response.Response:
    properties:
      result:
        example: result description
        type: string
    type: object
host: localhost:8080
info:
  contact:
    name: NYCUArchery
    url: https://github.com/NYCUarchery
  description: Gin swagger
  license:
    name: no license yet
  title: Gin swagger
  version: "1.0"
paths:
  /api/competition:
    post:
      consumes:
      - application/json
      description: Post one new Competition data with new id, create noTypeGroup,
        create Lanes which link to noTypeGroup, and return the new Competition data
      parameters:
      - description: Competition
        in: body
        name: Competition
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
      summary: Create one Competition and related data
      tags:
      - Competition
  /api/competition/{id}:
    delete:
      consumes:
      - application/json
      description: delete one Competition by id, delete all related lanes and groups
      parameters:
      - description: Competition ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
      summary: delete one Competition
      tags:
      - Competition
    get:
      description: Get one Competition by id without GroupInfo
      parameters:
      - description: Competition ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
      summary: Show one Competition without GroupInfo
      tags:
      - Competition
  /api/competition/currentphaseminus/{id}:
    put:
      description: update one Competition currentPhase --
      parameters:
      - description: Competition ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
      summary: update one Competition currentPhase --
      tags:
      - Competition
  /api/competition/currentphaseplus/{id}:
    put:
      description: update one Competition currentPhase ++
      parameters:
      - description: Competition ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
      summary: update one Competition currentPhase ++
      tags:
      - Competition
  /api/competition/eliminationisactive/{id}:
    put:
      description: update one Competition Elimination Active to be true
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
      summary: update one Competition Elimination Active to be true
      tags:
      - Competition
  /api/competition/groups/{id}:
    get:
      description: Get one Competition by id with GroupInfos
      parameters:
      - description: Competition ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
      summary: Show one Competition with GroupInfos
      tags:
      - Competition
  /api/competition/groups/qualieli/{id}:
    get:
      description: Get one Competition by id with related Groups which have related
        one Qualification id and many Elimination ids
      parameters:
      - description: Competition ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
      summary: Show one Competition with Groups Qualification Elimination
      tags:
      - Competition
  /api/competition/mixedeliminationisactive/{id}:
    put:
      description: update one Competition Mixed Elimination Active to be true and
        create all mixed elimination for groups
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: update one Competition Mixed Elimination Active to be true and create
        all mixed elimination for groups
      tags:
      - Competition
  /api/competition/qualificationisactive/{id}:
    put:
      description: update one Competition Qualification Active to be true
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
      summary: update one Competition Qualification Active to be true
      tags:
      - Competition
  /api/competition/teameliminationisactive/{id}:
    put:
      description: update one Competition Team Elimination Active to be true and create
        all team elimination for groups
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: update one Competition Team Elimination Active to be true and create
        all team elimination for groups
      tags:
      - Competition
  /api/competition/whole/{id}:
    put:
      consumes:
      - application/json
      description: Put whole new Competition and overwrite with the id but without
        GroupInfo, cannot replace GroupNum, LaneNum, FirstLaneId, noTyoeGroupId
      parameters:
      - description: Competition ID
        in: path
        name: id
        required: true
        type: string
      - description: Competition
        in: body
        name: Competition
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: update one Competition without GroupInfo
      tags:
      - Competition
  /api/elimination:
    post:
      consumes:
      - application/json
      description: Post one new Elimination data, and three medals
      parameters:
      - description: Elimination
        in: body
        name: Elimination
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
      summary: Create one Elimination
      tags:
      - Elimination
  /api/elimination/{id}:
    delete:
      consumes:
      - application/json
      description: Delete one Elimination by id, and related stages and matches
      parameters:
      - description: Elimination ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "204":
          description: No Content
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
      summary: Delete one Elimination, and related stages and matches
      tags:
      - Elimination
    get:
      description: Get one Elimination by id
      parameters:
      - description: Elimination ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
      summary: Show one Elimination
      tags:
      - Elimination
  /api/elimination/currentend/minus/{id}:
    put:
      description: Update one Elimination current end minus one by id
      parameters:
      - description: Elimination ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
      summary: Update one Elimination current end minus one
      tags:
      - Elimination
  /api/elimination/currentend/plus/{id}:
    put:
      description: Update one Elimination current end plus one by id
      parameters:
      - description: Elimination ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
      summary: Update one Elimination current end plus one
      tags:
      - Elimination
  /api/elimination/currentstage/minus/{id}:
    put:
      description: Update one Elimination current stage minus one by id
      parameters:
      - description: Elimination ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
      summary: Update one Elimination current stage minus one
      tags:
      - Elimination
  /api/elimination/currentstage/plus/{id}:
    put:
      description: Update one Elimination current stage plus one by id
      parameters:
      - description: Elimination ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
      summary: Update one Elimination current stage plus one
      tags:
      - Elimination
  /api/elimination/match:
    post:
      consumes:
      - application/json
      description: Post one new Match data with new id
      parameters:
      - description: Match
        in: body
        name: Match
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
      summary: Create one Match
      tags:
      - Elimination
  /api/elimination/scores/{id}:
    get:
      description: Get one Elimination with stages, matches, matchResults, matchEnds,
        scores by id
      parameters:
      - description: Elimination ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
      summary: Show one Elimination with all scores
      tags:
      - Elimination
  /api/elimination/stage:
    post:
      consumes:
      - application/json
      description: Post one new Stage data with new id
      parameters:
      - description: Stage
        in: body
        name: Stage
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
      summary: Create one Stage
      tags:
      - Elimination
  /api/elimination/stages/{id}:
    get:
      description: Get one Elimination with stages by id
      parameters:
      - description: Elimination ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
      summary: Show one Elimination with stages
      tags:
      - Elimination
  /api/groupinfo:
    post:
      consumes:
      - application/json
      description: Post one new GroupInfo data with new id, create qualification with
        same id, auto write GroupIndex, and auto create elimination
      parameters:
      - description: LaneData
        in: body
        name: GroupInfo
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
      summary: Create one GroupInfo
      tags:
      - GroupInfo
  /api/groupinfo/{id}:
    delete:
      consumes:
      - application/json
      description: delete one GroupInfo by id, and delete qualification with same
        id
      parameters:
      - description: GroupInfo ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
      summary: delete one GroupInfo
      tags:
      - GroupInfo
    get:
      description: Get one GroupInfo by id
      parameters:
      - description: LaneInfo ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
      summary: Show one GroupInfo
      tags:
      - GroupInfo
  /api/groupinfo/reorder:
    put:
      consumes:
      - application/json
      description: Put competition_id and group_ids to update GroupInfos Indexes under
        the same Competition
      parameters:
      - description: GroupInfo IDs for reorder
        in: body
        name: groupIdsForReorder
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: update GroupInfos Indexes under the same Competition
      tags:
      - GroupInfo
  /api/groupinfo/whole/{id}:
    put:
      consumes:
      - application/json
      description: Put whole new GroupInfo and overwrite with the id, cannot overwrite
        CompetitionId
      parameters:
      - description: GroupInfo ID
        in: path
        name: id
        required: true
        type: string
      - description: GroupInfo
        in: body
        name: GroupInfo
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: update one GroupInfo
      tags:
      - GroupInfo
  /api/lane/{id}:
    get:
      description: Get one Lane by id
      parameters:
      - description: Lane ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
      summary: Show one Lane
      tags:
      - Lane
  /api/lane/all/{id}:
    get:
      description: Get all Lane by competition id
      parameters:
      - description: competition ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
      summary: Show all Lane of a competition
      tags:
      - Lane
  /api/matchend/isconfirmed/{id}:
    put:
      consumes:
      - application/json
      description: Update one MatchEnd isConfirmed by id
      parameters:
      - description: MatchEnd ID
        in: path
        name: id
        required: true
        type: integer
      - description: MatchEnd
        in: body
        name: MatchEnd
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
      summary: Update one MatchEnd isConfirmed
      tags:
      - MatchEnd
  /api/matchend/scores/{id}:
    put:
      consumes:
      - application/json
      description: |-
        Update one MatchEnd totalScores by id and all related MatchScores by MatchScore ids
        MatchScore ids and scores must be the same length
      parameters:
      - description: MatchEnd ID
        in: path
        name: id
        required: true
        type: integer
      - description: matchEndScoresData
        in: body
        name: matchEndScoresData
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
      summary: Update one MatchEnd scores
      tags:
      - MatchEnd
  /api/matchend/totalscores/{id}:
    put:
      consumes:
      - application/json
      description: Update one MatchEnd totalScores by id
      parameters:
      - description: MatchEnd ID
        in: path
        name: id
        required: true
        type: integer
      - description: MatchEnd
        in: body
        name: MatchEnd
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
      summary: Update one MatchEnd totalScores
      tags:
      - MatchEnd
  /api/matchresult:
    post:
      consumes:
      - application/json
      description: Post one new MatchResult data with new id, and auto write totalPoints
        ShootOffScore IsWinner
      parameters:
      - description: MatchResult
        in: body
        name: MatchResult
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
      summary: Create one MatchResult
      tags:
      - MatchResult
  /api/matchresult/{id}:
    delete:
      description: Delete one MatchResult with matchEnds and matchScores by id
      parameters:
      - description: MatchResult ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
      summary: Delete one MatchResult
      tags:
      - MatchResult
    get:
      description: Get one MatchResult without other data by id
      parameters:
      - description: MatchResult ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
      summary: Show one MatchResult
      tags:
      - MatchResult
  /api/matchresult/iswinner/{id}:
    put:
      consumes:
      - application/json
      description: Update one MatchResult isWinner by id
      parameters:
      - description: MatchResult ID
        in: path
        name: id
        required: true
        type: integer
      - description: MatchResult
        in: body
        name: MatchResult
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
      summary: Update one MatchResult isWinner
      tags:
      - MatchResult
  /api/matchresult/lanenumber/{id}:
    put:
      consumes:
      - application/json
      description: Update one MatchResult laneNumber by id
      parameters:
      - description: MatchResult ID
        in: path
        name: id
        required: true
        type: integer
      - description: MatchResult
        in: body
        name: MatchResult
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
      summary: Update one MatchResult laneNumber
      tags:
      - MatchResult
  /api/matchresult/matchend:
    post:
      consumes:
      - application/json
      description: Post one new MatchEnd data, and auto write totalScores IsConfirmed,
        and auto create matchScores by teamSize
      parameters:
      - description: matchEndData
        in: body
        name: matchEndData
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
      summary: Create one MatchEnd
      tags:
      - MatchEnd
  /api/matchresult/scores/{id}:
    get:
      description: Get one MatchResult with match_ends and match_scores by id
      parameters:
      - description: MatchResult ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
      summary: Show one MatchResult with match_ends and match_scores
      tags:
      - MatchResult
  /api/matchresult/shootoffscore/{id}:
    put:
      consumes:
      - application/json
      description: Update one MatchResult shootOffScore by id
      parameters:
      - description: MatchResult ID
        in: path
        name: id
        required: true
        type: integer
      - description: MatchResult
        in: body
        name: MatchResult
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
      summary: Update one MatchResult shootOffScore
      tags:
      - MatchResult
  /api/matchresult/totalpoints/{id}:
    put:
      consumes:
      - application/json
      description: Update one MatchResult totalPoints by id
      parameters:
      - description: MatchResult ID
        in: path
        name: id
        required: true
        type: integer
      - description: MatchResult
        in: body
        name: MatchResult
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
      summary: Update one MatchResult totalPoints
      tags:
      - MatchResult
  /api/matchscore/score/{id}:
    put:
      consumes:
      - application/json
      description: Update one MatchScore score by id
      parameters:
      - description: MatchScore ID
        in: path
        name: id
        required: true
        type: integer
      - description: MatchScore
        in: body
        name: MatchScore
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
      summary: Update one MatchScore score
      tags:
      - MatchScore
  /api/medal/{id}:
    get:
      description: get one medal by id
      parameters:
      - description: Medal ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
      summary: Show one medal by id
      tags:
      - Medal
  /api/medal/elimination/{id}:
    get:
      description: get medals of elimination by elimination id
      parameters:
      - description: elimination ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
      summary: Show medals of elimination by elimination id
      tags:
      - Medal
  /api/qualification/{id}:
    get:
      description: Get one Qualification by id
      parameters:
      - description: Qualification ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
      summary: Show one Qualification
      tags:
      - Qualification
  /api/qualification/lanes/{id}:
    get:
      description: Get one Qualification with Lanes by id
      parameters:
      - description: Qualification ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
      summary: Show one Qualification
      tags:
      - Qualification
  /api/qualification/whole/{id}:
    put:
      consumes:
      - application/json
      description: Put whole new Qualification and overwrite with the id, but cannot
        replace groupid
      parameters:
      - description: Qualification ID
        in: path
        name: id
        required: true
        type: string
      - description: Qualification
        in: body
        name: Qualification
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: update one Qualification
      tags:
      - Qualification
  /competition:
    get:
      description: get information of all the competitions
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/database.Competition'
            type: array
        "500":
          description: internal db error
          schema:
            type: string
      summary: get information of all the competitions
      tags:
      - Competition
  /data/oldlaneinfo:
    post:
      consumes:
      - application/json
      description: Post one new OldLaneInfo data with new id, and return the new OldLaneInfo
        data
      parameters:
      - description: LaneData
        in: body
        name: LaneData
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
      summary: Create one OldLaneInfo
      tags:
      - OldLaneInfo
  /data/oldlaneinfo/{id}:
    delete:
      consumes:
      - application/json
      description: delete one OldLaneInfo by id
      parameters:
      - description: OldLaneInfo ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
      summary: delete one OldLaneInfo
      tags:
      - OldLaneInfo
    get:
      description: Get one OldLaneInfo by id
      parameters:
      - description: OldLaneInfo ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
      summary: Show one OldLaneInfo
      tags:
      - OldLaneInfo
  /data/oldlaneinfo/confirm/{id}/{stageindex}/{userindex}/{confirm}:
    put:
      consumes:
      - application/json
      description: Put one OldLaneInfo confirm by index and id
      parameters:
      - description: OldLaneInfo ID
        in: path
        name: id
        required: true
        type: string
      - description: OldLaneInfo stage index
        in: path
        name: stageindex
        required: true
        type: string
      - description: OldLaneInfo user index of the stage
        in: path
        name: userindex
        required: true
        type: string
      - description: confirmation of the user
        in: path
        name: confirm
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: update one OldLaneInfo confirmation
      tags:
      - OldLaneInfo
  /data/oldlaneinfo/score/{id}/{stageindex}/{userindex}/{arrowindex}/{score}:
    put:
      consumes:
      - application/json
      description: Put one OldLaneInfo score by index and id
      parameters:
      - description: OldLaneInfo ID
        in: path
        name: id
        required: true
        type: string
      - description: OldLaneInfo stage index
        in: path
        name: stageindex
        required: true
        type: string
      - description: OldLaneInfo user index of the stage
        in: path
        name: userindex
        required: true
        type: string
      - description: OldLaneInfo arrow index of the user
        in: path
        name: arrowindex
        required: true
        type: string
      - description: score of the arrow
        in: path
        name: score
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: update one OldLaneInfo Score
      tags:
      - OldLaneInfo
  /data/oldlaneinfo/whole/{id}:
    put:
      consumes:
      - application/json
      description: Put whole new OldLaneInfo and overwrite with the id
      parameters:
      - description: OldLaneInfo ID
        in: path
        name: id
        required: true
        type: string
      - description: LaneData
        in: body
        name: LaneData
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: update one OldLaneInfo
      tags:
      - OldLaneInfo
  /institution:
    get:
      consumes:
      - application/json
      description: get all institution info from db
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/database.Institution'
                  type: array
              type: object
        "500":
          description: db error
          schema:
            $ref: '#/definitions/response.Response'
      summary: get all institution info
      tags:
      - Institution
    post:
      consumes:
      - application/json
      description: add an institution to db
      parameters:
      - description: institution's name
        in: formData
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: empty institution name
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: db error
          schema:
            $ref: '#/definitions/response.Response'
      summary: create an institution
      tags:
      - Institution
  /institution/{id}:
    get:
      consumes:
      - application/json
      description: get institution info from db by id
      parameters:
      - description: institution's id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/database.Institution'
              type: object
        "400":
          description: invalid id
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: no institution found
          schema:
            $ref: '#/definitions/response.Response'
      summary: get institution info by id
      tags:
      - Institution
  /participant/:
    post:
      consumes:
      - application/json
      description: add a particpant to the competition
      parameters:
      - description: competition id
        in: formData
        name: competitionID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: no user/competition found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: internal db error
          schema:
            $ref: '#/definitions/response.Response'
      summary: join in a competition
      tags:
      - Participant
  /session:
    delete:
      description: delete the session
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/response.Response'
      summary: logout
      tags:
      - Session
    post:
      consumes:
      - application/json
      description: get a session
      parameters:
      - description: user's name
        in: formData
        name: username
        required: true
        type: string
      - description: password
        in: formData
        name: password
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success | has loginned
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: wrong username or password
          schema:
            $ref: '#/definitions/response.Response'
      summary: login
      tags:
      - Session
  /swagger/doc.json:
    get:
      description: get Api docs in json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Show Api Docs in json
      tags:
      - docs
  /user:
    post:
      consumes:
      - application/json
      description: add a user to db
      parameters:
      - description: user's name
        in: formData
        name: username
        required: true
        type: string
      - description: password
        in: formData
        name: password
        required: true
        type: string
      - description: email
        in: formData
        name: email
        required: true
        type: string
      - description: overview
        in: formData
        name: overview
        type: string
      - description: institution ID
        in: formData
        name: institutionID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: a user object
          schema:
            $ref: '#/definitions/database.User'
        "400":
          description: username/email exists | empty username/password/email/institutionID
            | invalid info
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: db error
          schema:
            $ref: '#/definitions/response.Response'
      summary: register a user
      tags:
      - User
  /user/{id}:
    get:
      consumes:
      - application/json
      description: get a user's username, overview, and institution id
      parameters:
      - description: user's id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/database.User'
              type: object
        "400":
          description: empty/invalid user id
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: no user found
          schema:
            $ref: '#/definitions/response.Response'
      summary: get a user's information
      tags:
      - User
    put:
      consumes:
      - application/json
      description: modify username, password, overview, and institution_id
      parameters:
      - description: user's id
        in: path
        name: id
        required: true
        type: string
      - description: original password
        in: formData
        name: oriPassword
        required: true
        type: string
      - description: modified password
        in: formData
        name: modPassword
        type: string
      - description: modified email
        in: formData
        name: email
        type: string
      - description: modified overview
        in: formData
        name: overview
        type: string
      - description: modified institution ID
        in: formData
        name: institutionID
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: empty/invalid user id | invalid modified information
          schema:
            $ref: '#/definitions/response.Response'
        "403":
          description: cannot change other's info | wrong original password
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: internal db error
          schema:
            $ref: '#/definitions/response.Response'
      summary: modify user's information
      tags:
      - User
  /user/me:
    get:
      description: get my uid in the session
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                id:
                  type: integer
              type: object
      summary: get my uid
      tags:
      - User
swagger: "2.0"
