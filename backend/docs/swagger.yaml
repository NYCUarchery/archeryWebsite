basePath: /api/
definitions:
  database.Competition:
    properties:
      current_phase:
        type: integer
      elimination_is_active:
        type: boolean
      end_time:
        type: string
      groups:
        items:
          $ref: '#/definitions/database.Group'
        type: array
      groups_num:
        type: integer
      host_id:
        type: integer
      id:
        type: integer
      lanes_num:
        type: integer
      mixed_elimination_is_active:
        type: boolean
      participants:
        items:
          $ref: '#/definitions/database.Participant'
        type: array
      qualification_current_end:
        type: integer
      qualification_is_active:
        type: boolean
      rounds_num:
        type: integer
      script:
        type: string
      start_time:
        type: string
      sub_title:
        type: string
      team_elimination_is_active:
        type: boolean
      title:
        type: string
      unassigned_group_id:
        type: integer
      unassigned_lane_id:
        type: integer
    type: object
  database.Elimination:
    properties:
      current_end:
        type: integer
      current_stage:
        type: integer
      group_id:
        type: integer
      id:
        type: integer
      medals:
        items:
          $ref: '#/definitions/database.Medal'
        type: array
      player_sets:
        items:
          $ref: '#/definitions/database.PlayerSet'
        type: array
      stages:
        items:
          $ref: '#/definitions/database.Stage'
        type: array
      team_size:
        type: integer
    type: object
  database.Group:
    properties:
      bow_type:
        type: string
      competition_id:
        type: integer
      group_index:
        type: integer
      group_name:
        type: string
      group_range:
        type: string
      id:
        type: integer
      players:
        items:
          $ref: '#/definitions/database.Player'
        type: array
    type: object
  database.Institution:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  database.Lane:
    properties:
      competition_id:
        type: integer
      id:
        type: integer
      lane_number:
        type: integer
      players:
        items:
          $ref: '#/definitions/database.Player'
        type: array
      qualification_id:
        type: integer
    type: object
  database.Match:
    properties:
      id:
        type: integer
      match_results:
        items:
          $ref: '#/definitions/database.MatchResult'
        type: array
      stage_id:
        type: integer
    type: object
  database.MatchEnd:
    properties:
      id:
        type: integer
      is_confirmed:
        type: boolean
      match_result_id:
        type: integer
      match_scores:
        items:
          $ref: '#/definitions/database.MatchScore'
        type: array
      total_scores:
        type: integer
    type: object
  database.MatchResult:
    properties:
      id:
        type: integer
      is_winner:
        type: boolean
      lane_number:
        type: integer
      match_ends:
        items:
          $ref: '#/definitions/database.MatchEnd'
        type: array
      match_id:
        type: integer
      player_set:
        $ref: '#/definitions/database.PlayerSet'
      player_set_id:
        type: integer
      shoot_off_score:
        type: integer
      total_points:
        type: integer
    type: object
  database.MatchScore:
    properties:
      id:
        type: integer
      match_end_id:
        type: integer
      score:
        type: integer
    type: object
  database.Medal:
    properties:
      elimination_id:
        type: integer
      id:
        type: integer
      player_set_id:
        type: integer
      type:
        type: integer
    type: object
  database.Participant:
    properties:
      competitionID:
        type: integer
      id:
        type: integer
      role:
        type: string
      status:
        type: string
      userID:
        type: integer
    type: object
  database.Player:
    properties:
      group_id:
        type: integer
      id:
        type: integer
      lane_id:
        type: integer
      name:
        type: string
      order:
        type: integer
      participant_id:
        type: integer
      player_sets:
        items:
          $ref: '#/definitions/database.PlayerSet'
        type: array
      rank:
        type: integer
      rounds:
        items:
          $ref: '#/definitions/database.Round'
        type: array
      shoot_off_score:
        type: integer
      total_score:
        type: integer
    type: object
  database.PlayerSet:
    properties:
      elimination_id:
        type: integer
      id:
        type: integer
      players:
        items:
          $ref: '#/definitions/database.Player'
        type: array
      rank:
        type: integer
      set_name:
        type: string
      total_score:
        type: integer
    type: object
  database.Qualification:
    properties:
      advancing_num:
        type: integer
      end_lane:
        type: integer
      id:
        type: integer
      lanes:
        items:
          $ref: '#/definitions/database.Lane'
        type: array
      start_lane:
        type: integer
    type: object
  database.Round:
    properties:
      id:
        type: integer
      player_id:
        type: integer
      round_ends:
        items:
          $ref: '#/definitions/database.RoundEnd'
        type: array
      total_score:
        type: integer
    type: object
  database.RoundEnd:
    properties:
      id:
        type: integer
      is_confirmed:
        type: boolean
      round_id:
        type: integer
      round_scores:
        items:
          $ref: '#/definitions/database.RoundScore'
        type: array
    type: object
  database.RoundScore:
    properties:
      id:
        type: integer
      round_end_id:
        type: integer
      score:
        type: integer
    type: object
  database.Stage:
    properties:
      elimination_id:
        type: integer
      id:
        type: integer
      matchs:
        items:
          $ref: '#/definitions/database.Match'
        type: array
    type: object
  database.User:
    properties:
      email:
        type: string
      id:
        type: integer
      institution_id:
        type: integer
      overview:
        type: string
      real_name:
        type: string
      user_name:
        type: string
    type: object
  endpoint.AccountInfo:
    properties:
      email:
        type: string
      institution_id:
        type: integer
      overview:
        type: string
      password:
        type: string
      real_name:
        type: string
      user_name:
        type: string
    type: object
  endpoint.CompetitionWGroupsQuaEliData:
    properties:
      competition_id:
        type: integer
      group_data:
        items:
          $ref: '#/definitions/endpoint.GroupData'
        type: array
    type: object
  endpoint.EliminationData:
    properties:
      elimination_id:
        type: integer
      team_size:
        type: integer
    type: object
  endpoint.GetPlayerSetsByMedalByEliminationId.playerSetData:
    properties:
      id:
        type: integer
      set_name:
        type: string
      type:
        type: integer
    type: object
  endpoint.GetUserID.ID:
    properties:
      id:
        type: integer
    type: object
  endpoint.GroupData:
    properties:
      bow_type:
        type: string
      elimination_data:
        items:
          $ref: '#/definitions/endpoint.EliminationData'
        type: array
      group_id:
        type: integer
      group_name:
        type: string
      group_range:
        type: string
    type: object
  endpoint.LoginInfo:
    properties:
      password:
        type: string
      user_name:
        type: string
    type: object
  endpoint.ModifyAccountPasswordInfo:
    properties:
      new_password:
        type: string
      original_password:
        type: string
    type: object
  endpoint.ModifyInfo.ModifyUser:
    properties:
      email:
        type: string
      institution_id:
        type: integer
      overview:
        type: string
      real_name:
        type: string
      user_name:
        type: string
    type: object
  endpoint.NewInstitutionInfo:
    properties:
      name:
        type: string
    type: object
  endpoint.NewParticipantInfo:
    properties:
      competition_id:
        type: integer
      role:
        type: string
      user_id:
        type: integer
    type: object
  endpoint.ParticipantWName:
    properties:
      competition_id:
        type: integer
      id:
        type: integer
      name:
        type: string
      role:
        type: string
      status:
        type: string
      user_id:
        type: integer
    type: object
  endpoint.PatchPlayerLaneOrder.UpdateLaneIdOrderData:
    properties:
      lane_id:
        type: integer
      order:
        type: integer
    type: object
  endpoint.PostCompetition.CompetitionPostData:
    properties:
      end_time:
        type: string
      host_id:
        type: integer
      lanes_num:
        type: integer
      rounds_num:
        type: integer
      script:
        type: string
      start_time:
        type: string
      sub_title:
        type: string
      title:
        type: string
    type: object
  endpoint.PostElimination.PostEliminationData:
    properties:
      group_id:
        type: integer
      team_size:
        type: integer
    type: object
  endpoint.PostGroupInfo.GroupData:
    properties:
      bow_type:
        type: string
      competition_id:
        type: integer
      group_index:
        type: integer
      group_name:
        type: string
      group_range:
        type: string
    type: object
  endpoint.PostMatch.MatchData:
    properties:
      lane_numbers:
        items:
          type: integer
        type: array
      player_set_ids:
        items:
          type: integer
        type: array
      stage_id:
        type: integer
    type: object
  endpoint.PostMatchEnd.matchEndData:
    properties:
      match_result_id:
        type: integer
      team_size:
        type: integer
    type: object
  endpoint.PostPlayerSet.playerSetData:
    properties:
      elimination_id:
        type: integer
      player_ids:
        items:
          type: integer
        type: array
      set_name:
        type: string
    type: object
  endpoint.PostRoundEnd.RoundEndData:
    properties:
      round_id:
        type: integer
    type: object
  endpoint.PostStage.PostStageData:
    properties:
      elimination_id:
        type: integer
    type: object
  endpoint.PutCompetition.CompetitionPutData:
    properties:
      current_phase:
        type: integer
      end_time:
        type: string
      qualification_current_end:
        type: integer
      script:
        type: string
      start_time:
        type: string
      sub_title:
        type: string
      title:
        type: string
    type: object
  endpoint.PutGroupInfo.GroupData:
    properties:
      bow_type:
        type: string
      group_index:
        type: integer
      group_name:
        type: string
      group_range:
        type: string
    type: object
  endpoint.PutMatchEndsIsConfirmedById.matchEndIsConfirmedData:
    properties:
      is_confirmed:
        type: boolean
    type: object
  endpoint.PutMatchEndsScoresById.matchEndScoresData:
    properties:
      match_score_ids:
        items:
          type: integer
        type: array
      scores:
        items:
          type: integer
        type: array
      total_scores:
        type: integer
    type: object
  endpoint.PutMatchEndsTotalScoresById.matchEndTotalScoresData:
    properties:
      total_scores:
        type: integer
    type: object
  endpoint.PutMatchResultIsWinnerById.matchResultIsWinnerData:
    properties:
      is_winner:
        type: boolean
    type: object
  endpoint.PutMatchResultLaneNumberById.matchResultLaneNumberData:
    properties:
      lane_number:
        type: integer
    type: object
  endpoint.PutMatchResultShootOffScoreById.matchResultShootOffScoreData:
    properties:
      shoot_off_score:
        type: integer
    type: object
  endpoint.PutMatchResultTotalPointsById.matchResultTotalPointsData:
    properties:
      total_points:
        type: integer
    type: object
  endpoint.PutMatchScoreScoreById.matchScoreData:
    properties:
      score:
        type: integer
    type: object
  endpoint.PutMedalPlayerSetIdById.RequestBody:
    properties:
      player_set_id:
        type: integer
    type: object
  endpoint.PutParticipant.PutParticipantData:
    properties:
      role:
        type: string
      status:
        type: string
    type: object
  endpoint.PutPlayerAllEndScoresByEndId.EndScores:
    properties:
      scores:
        items:
          type: integer
        type: array
    type: object
  endpoint.PutPlayerGroupId.UpdateGroupIdData:
    properties:
      group_id:
        type: integer
    type: object
  endpoint.PutPlayerIsConfirmed.UpdateIsConfirmedData:
    properties:
      is_confirmed:
        type: boolean
    type: object
  endpoint.PutPlayerLaneId.UpdateLaneIdData:
    properties:
      lane_id:
        type: integer
    type: object
  endpoint.PutPlayerOrder.UpdateOrderData:
    properties:
      order:
        type: integer
    type: object
  endpoint.PutPlayerSetName.playerSetData:
    properties:
      set_name:
        type: string
    type: object
  endpoint.PutPlayerShootoffScore.UpdateShootoffScoreData:
    properties:
      shoot_off_score:
        type: integer
    type: object
  endpoint.PutPlayerTotalScoreByplayerId.UpdateTotalScoreData:
    properties:
      new_score:
        type: integer
    type: object
  endpoint.PutQualificationByID.QualificationPutData:
    properties:
      advancing_num:
        type: integer
      end_lane:
        type: integer
      start_lane:
        type: integer
    type: object
  endpoint.UpdateTotalScoreData:
    properties:
      player_id:
        type: integer
      round_end_id:
        type: integer
      round_id:
        type: integer
      score:
        type: integer
    type: object
  endpoint.groupIdsForReorder:
    properties:
      competition_id:
        type: integer
      group_ids:
        items:
          type: integer
        type: array
    type: object
  response.DeleteSuccessResponse:
    properties:
      message:
        example: 'Delete ID(1) : sth delete success'
        type: string
    type: object
  response.ErrorIdResponse:
    properties:
      error:
        example: 'invalid ID(1) : sth error'
        type: string
    type: object
  response.ErrorInternalErrorResponse:
    properties:
      error:
        example: 'sth need fix ID(1) : sth error'
        type: string
    type: object
  response.ErrorReceiveDataFormatResponse:
    properties:
      error:
        example: 'bad request data: sth error'
        type: string
    type: object
  response.ErrorReceiveDataResponse:
    properties:
      error:
        example: 'bad request data ID(1): sth error'
        type: string
    type: object
  response.ErrorResponse:
    properties:
      error:
        example: error description
        type: string
    type: object
  response.Nill:
    type: object
  response.Response:
    properties:
      message:
        example: result description
        type: string
    type: object
host: localhost:80
info:
  contact:
    name: NYCUArchery
    url: https://github.com/NYCUarchery
  description: Gin swagger
  license:
    name: no license yet
  title: Gin swagger
  version: "1.0"
paths:
  /competition:
    get:
      description: Get the information of all competitions.
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              allOf:
              - $ref: '#/definitions/database.Competition'
              - properties:
                  groups:
                    $ref: '#/definitions/response.Nill'
                  participants:
                    $ref: '#/definitions/response.Nill'
                type: object
            type: array
        "500":
          description: internal db error for getting all competitions
          schema:
            $ref: '#/definitions/response.ErrorInternalErrorResponse'
      summary: Get the information of all competitions.
      tags:
      - Competition
    post:
      consumes:
      - application/json
      description: |-
        Post one new Competition data with new id.
        Create UnassignedGroup, create Lanes and UnassignedLane which link to UnassignedGroup.
        Add host as admin of competition, and return the new Competition data.
        RoundsNum and LanesNum will influence player post data, so cannot be changed.
        ZeroTime 0001-01-01T00:00:00+00:01
      parameters:
      - description: Competition
        in: body
        name: Competition
        required: true
        schema:
          $ref: '#/definitions/endpoint.PostCompetition.CompetitionPostData'
      produces:
      - application/json
      responses:
        "200":
          description: success, return new competition data
          schema:
            allOf:
            - $ref: '#/definitions/database.Competition'
            - properties:
                groups:
                  $ref: '#/definitions/response.Nill'
                participants:
                  $ref: '#/definitions/response.Nill'
              type: object
        "400":
          description: roundsNum must > 0 / When creating Competition, startTime must
            <= endTime
          schema:
            $ref: '#/definitions/response.ErrorReceiveDataFormatResponse'
        "500":
          description: internal db error / Post GroupInfo / Update Competition UnassignedLaneId
            / Update Competition UnassignedGroupId
          schema:
            $ref: '#/definitions/response.ErrorInternalErrorResponse'
      summary: Create one Competition and related data.
      tags:
      - Competition
  /competition/{id}:
    delete:
      description: |-
        Delete one Competition by id.
        Delete all related groups, lanes, players, participants.
      parameters:
      - description: Competition ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: delete success
          schema:
            $ref: '#/definitions/response.DeleteSuccessResponse'
        "400":
          description: invalid competition id parameter
          schema:
            $ref: '#/definitions/response.ErrorIdResponse'
        "500":
          description: internal db error / Delete Competition with Groups / Delete
            GroupInfo By Id Through Competition / Delete Player Through Competition
            / Delete Participaint / Delete Lane By Competition Id
          schema:
            $ref: '#/definitions/response.ErrorInternalErrorResponse'
      summary: Delete one Competition.
      tags:
      - Competition
    get:
      description: |-
        Get one Competition by id without groups and participants.
        zeroTime 0001-01-01T00:00:00+00:01
      parameters:
      - description: Competition ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: success, but groups and participants are empty
          schema:
            allOf:
            - $ref: '#/definitions/database.Competition'
            - properties:
                groups:
                  $ref: '#/definitions/response.Nill'
                participants:
                  $ref: '#/definitions/response.Nill'
              type: object
        "400":
          description: invalid competition id parameter
          schema:
            $ref: '#/definitions/response.ErrorIdResponse'
        "500":
          description: internal db error for getting competition
          schema:
            $ref: '#/definitions/response.ErrorInternalErrorResponse'
      summary: Show one Competition without groups and participants.
      tags:
      - Competition
    put:
      consumes:
      - application/json
      description: |-
        Put whole new Competition and overwrite by the id.
        Allow to change title, subtitle, startTime, endTime, script, currentPhase, qualificationCurrentEnd.
        Cannot replace RoundNum, GroupNum, LaneNum, unassignedLaneId, unassignedGroupId, hostId, currentPhase, qualificationCurrentEnd.
        zeroTime 0001-01-01T00:00:00+00:01
      parameters:
      - description: Competition ID
        in: path
        name: id
        required: true
        type: integer
      - description: Competition
        in: body
        name: Competition
        required: true
        schema:
          $ref: '#/definitions/endpoint.PutCompetition.CompetitionPutData'
      produces:
      - application/json
      responses:
        "200":
          description: success, return modified competition data
          schema:
            allOf:
            - $ref: '#/definitions/database.Competition'
            - properties:
                groups:
                  $ref: '#/definitions/response.Nill'
                participants:
                  $ref: '#/definitions/response.Nill'
              type: object
        "204":
          description: success, but no change
          schema:
            $ref: '#/definitions/response.Nill'
        "400":
          description: invalid competition id parameter / When creating Competition,
            startTime must <= endTime
          schema:
            $ref: '#/definitions/response.ErrorReceiveDataResponse'
        "500":
          description: internal db error / Get Competition / Update Competition
          schema:
            $ref: '#/definitions/response.ErrorInternalErrorResponse'
      summary: update one Competition
      tags:
      - Competition
  /competition/current-phase/minus/{id}:
    patch:
      description: Update one Competition currentPhase -- by id.
      parameters:
      - description: Competition ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: invalid competition id parameter
          schema:
            $ref: '#/definitions/response.ErrorIdResponse'
        "500":
          description: Update Competition CurrentPhase Minus
          schema:
            $ref: '#/definitions/response.ErrorInternalErrorResponse'
      summary: Update one Competition currentPhase -- by id.
      tags:
      - Competition
  /competition/current-phase/plus/{id}:
    patch:
      description: Update one Competition currentPhase ++ by id.
      parameters:
      - description: Competition ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: invalid competition id parameter
          schema:
            $ref: '#/definitions/response.ErrorIdResponse'
        "500":
          description: Update Competition CurrentPhase Plus
          schema:
            $ref: '#/definitions/response.ErrorInternalErrorResponse'
      summary: Update one Competition currentPhase ++ by id.
      tags:
      - Competition
  /competition/current/{head}/{tail}:
    get:
      description: |-
        Get current Competitions, head and tail are the range of most recent competitions.
        For example, head = 0, tail = 10, then return the most recent 10 competitions.
        head >= 0, tail >= 0, head <= tail
      parameters:
      - description: head
        in: path
        name: head
        required: true
        type: integer
      - description: tail
        in: path
        name: tail
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: success, return most recent competitions
          schema:
            items:
              allOf:
              - $ref: '#/definitions/database.Competition'
              - properties:
                  groups:
                    $ref: '#/definitions/response.Nill'
                  participants:
                    $ref: '#/definitions/response.Nill'
                type: object
            type: array
        "400":
          description: head and tail must >= 0 / head must <= tail / invalid head
            parameter / invalid tail parameter
          schema:
            $ref: '#/definitions/response.ErrorReceiveDataFormatResponse'
        "500":
          description: internal db error / Get Current Competitions
          schema:
            $ref: '#/definitions/response.ErrorInternalErrorResponse'
      summary: Show current Competitions
      tags:
      - Competition
  /competition/elimination-isactive/{id}:
    patch:
      description: |-
        Update one Competition Elimination Active to be true by id.
        Cannot change to false, only can change to true.
      parameters:
      - description: Competition ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/response.Response'
        "204":
          description: success, but no change
          schema:
            $ref: '#/definitions/response.Nill'
        "400":
          description: invalid competition id parameter
          schema:
            $ref: '#/definitions/response.ErrorIdResponse'
        "500":
          description: Update Competition Elimination Active
          schema:
            $ref: '#/definitions/response.ErrorInternalErrorResponse'
      summary: Update one Competition Elimination Active to be true by id.
      tags:
      - Competition
  /competition/groups/{id}:
    get:
      description: Get one Competition by id with GroupInfos
      parameters:
      - description: Competition ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: success, return competition without participants
          schema:
            allOf:
            - $ref: '#/definitions/database.Competition'
            - properties:
                groups:
                  items:
                    allOf:
                    - $ref: '#/definitions/database.Group'
                    - properties:
                        players:
                          $ref: '#/definitions/response.Nill'
                      type: object
                  type: array
                participants:
                  $ref: '#/definitions/response.Nill'
              type: object
        "400":
          description: invalid competition id parameter
          schema:
            $ref: '#/definitions/response.ErrorIdResponse'
        "500":
          description: internal db error for getting competition
          schema:
            $ref: '#/definitions/response.ErrorInternalErrorResponse'
      summary: Show one Competition with GroupInfos
      tags:
      - Competition
  /competition/groups/eliminations/{id}:
    get:
      description: Get one Competition by id with related Groups which have related
        one Qualification id and many Elimination ids.
      parameters:
      - description: Competition ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: success, return competition with groups and eliminations
          schema:
            $ref: '#/definitions/endpoint.CompetitionWGroupsQuaEliData'
        "400":
          description: invalid comepetition id parameter
          schema:
            $ref: '#/definitions/response.ErrorIdResponse'
        "500":
          description: internal db error / Get Competition Group Ids when get Competition
            with Groups Qualification Elimination / Get Elimination By Group Id when
            get Competition with Groups Qualification Elimination
          schema:
            $ref: '#/definitions/response.ErrorInternalErrorResponse'
      summary: Show Groups and Eliminations of one Competition.
      tags:
      - Competition
  /competition/groups/players/{id}:
    get:
      description: Get one Competition by id with GroupInfos and Players.
      parameters:
      - description: Competition ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: success, return competition with groups and players
          schema:
            allOf:
            - $ref: '#/definitions/database.Competition'
            - properties:
                groups:
                  items:
                    allOf:
                    - $ref: '#/definitions/database.Group'
                    - properties:
                        players:
                          items:
                            allOf:
                            - $ref: '#/definitions/database.Player'
                            - properties:
                                player_sets:
                                  $ref: '#/definitions/response.Nill'
                                rounds:
                                  $ref: '#/definitions/response.Nill'
                              type: object
                          type: array
                      type: object
                  type: array
                participants:
                  $ref: '#/definitions/response.Nill'
              type: object
        "400":
          description: invalid comepetition id parameter
          schema:
            $ref: '#/definitions/response.ErrorIdResponse'
        "500":
          description: internal db error for getting competition
          schema:
            $ref: '#/definitions/response.ErrorInternalErrorResponse'
      summary: Show one Competition with GroupInfos and Players.
      tags:
      - Competition
  /competition/mixed-elimination-isactive/{id}:
    patch:
      description: |-
        Update one Competition Mixed Elimination Active to be true by id.
        Cannot change to false, only can change to true.
        create all mixed elimination for groups
      parameters:
      - description: Competition ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/response.Response'
        "204":
          description: success, but no change
          schema:
            $ref: '#/definitions/response.Nill'
        "400":
          description: invalid competition id parameter
          schema:
            $ref: '#/definitions/response.ErrorIdResponse'
        "500":
          description: Update Competition Mixed Elimination Active / Get Competition
            Group Ids / Post Elimination By Id
          schema:
            $ref: '#/definitions/response.ErrorInternalErrorResponse'
      summary: Update one Competition Mixed Elimination Active to be true and create
        mixed elimination.
      tags:
      - Competition
  /competition/participants/{id}:
    get:
      description: Get one Competition by id with Participants.
      parameters:
      - description: Competition ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: success, return competition without groups
          schema:
            allOf:
            - $ref: '#/definitions/database.Competition'
            - properties:
                groups:
                  $ref: '#/definitions/response.Nill'
                participants:
                  $ref: '#/definitions/database.Participant'
              type: object
        "400":
          description: invalid comepetition id parameter
          schema:
            $ref: '#/definitions/response.ErrorIdResponse'
        "500":
          description: internal db error for getting competition
          schema:
            $ref: '#/definitions/response.ErrorInternalErrorResponse'
      summary: Show one Competition with Participants.
      tags:
      - Competition
  /competition/qualification-current-end/minus/{id}:
    patch:
      description: Update one Competition Qualification currentEnd -- by id.
      parameters:
      - description: Competition ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: invalid competition id parameter
          schema:
            $ref: '#/definitions/response.ErrorIdResponse'
        "500":
          description: Update Competition Qualification CurrentEnd Minus
          schema:
            $ref: '#/definitions/response.ErrorInternalErrorResponse'
      summary: Update one Competition Qualification currentEnd -- by id.
      tags:
      - Competition
  /competition/qualification-current-end/plus/{id}:
    patch:
      description: Update one Competition Qualification currentEnd ++ by id.
      parameters:
      - description: Competition ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: invalid competition id parameter
          schema:
            $ref: '#/definitions/response.ErrorIdResponse'
        "500":
          description: Update Competition Qualification CurrentEnd Plus
          schema:
            $ref: '#/definitions/response.ErrorInternalErrorResponse'
      summary: Update one Competition Qualification currentEnd ++ by id.
      tags:
      - Competition
  /competition/qualification-isactive/{id}:
    patch:
      description: |-
        Update one Competition Qualification Active to be true by id.
        Cannot change to false, only can change to true.
      parameters:
      - description: Competition ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/response.Response'
        "204":
          description: success, but no change
          schema:
            $ref: '#/definitions/response.Nill'
        "400":
          description: invalid competition id parameter
          schema:
            $ref: '#/definitions/response.ErrorIdResponse'
        "500":
          description: Update Competition Qualification Active
          schema:
            $ref: '#/definitions/response.ErrorInternalErrorResponse'
      summary: Update one Competition Qualification Active to be true by id.
      tags:
      - Competition
  /competition/refresh/groups/players/rank/{id}:
    patch:
      consumes:
      - application/json
      description: Refresh all player ranking of different groups in one Competition.
      parameters:
      - description: Competition ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Update Competition Ranking Success
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: invalid competition id parameter
          schema:
            $ref: '#/definitions/response.ErrorIdResponse'
        "500":
          description: internal db error / Get Competition GroupIds when update ranking
            / Get player ids when update ranking / Update player rank when update
            ranking by competition id
          schema:
            $ref: '#/definitions/response.ErrorInternalErrorResponse'
      summary: Refresh one Competition Ranking.
      tags:
      - Competition
  /competition/team-elimination-isactive/{id}:
    patch:
      description: |-
        Update one Competition Team Elimination Active to be true by id.
        Cannot change to false, only can change to true.
        Create all team elimination for groups.
      parameters:
      - description: Competition ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/response.Response'
        "204":
          description: success, but no change
          schema:
            $ref: '#/definitions/response.Nill'
        "400":
          description: invalid competition id parameter
          schema:
            $ref: '#/definitions/response.ErrorIdResponse'
        "500":
          description: Update Competition Team Elimination Active / Get Competition
            Group Ids / Post Elimination By Id
          schema:
            $ref: '#/definitions/response.ErrorInternalErrorResponse'
      summary: Update one Competition Team Elimination Active to be true and create
        team elimination.
      tags:
      - Competition
  /competition/user/{userid}/{head}/{tail}:
    get:
      description: |-
        Get recent Competitions by User id, head and tail are the range of most recent competitions.
        For example, head = 0, tail = 10, then return the most recent 10 competitions.
        head >= 0, tail >= 0, head <= tail
      parameters:
      - description: User ID
        in: path
        name: userid
        required: true
        type: integer
      - description: head
        in: path
        name: head
        required: true
        type: integer
      - description: tail
        in: path
        name: tail
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: success, return most recent competitions dealing with User
          schema:
            items:
              allOf:
              - $ref: '#/definitions/database.Competition'
              - properties:
                  groups:
                    $ref: '#/definitions/response.Nill'
                  participants:
                    $ref: '#/definitions/response.Nill'
                type: object
            type: array
        "400":
          description: head and tail must >= 0 / head must <= tail / invalid head
            parameter / invalid tail parameter / invalid userid parameter
          schema:
            $ref: '#/definitions/response.ErrorReceiveDataFormatResponse'
        "500":
          description: internal db error / Get User / Get Competitions Of User
          schema:
            $ref: '#/definitions/response.ErrorInternalErrorResponse'
      summary: Show recent Competitions dealing with User.
      tags:
      - Competition
  /elimination:
    post:
      consumes:
      - application/json
      description: Post one new Elimination data, and three medals
      parameters:
      - description: Elimination
        in: body
        name: Elimination
        required: true
        schema:
          $ref: '#/definitions/endpoint.PostElimination.PostEliminationData'
      produces:
      - application/json
      responses:
        "200":
          description: success, return one Elimination with new id
          schema:
            allOf:
            - $ref: '#/definitions/database.Elimination'
            - properties:
                medals:
                  $ref: '#/definitions/response.Nill'
                player_sets:
                  $ref: '#/definitions/response.Nill'
                stages:
                  $ref: '#/definitions/response.Nill'
              type: object
        "400":
          description: invalid group ID, maybe not exist
          schema:
            $ref: '#/definitions/response.ErrorIdResponse'
        "500":
          description: internal db error for Create Elimination
          schema:
            $ref: '#/definitions/response.ErrorInternalErrorResponse'
      summary: Create one Elimination
      tags:
      - Elimination
  /elimination/{id}:
    delete:
      consumes:
      - application/json
      description: Delete one Elimination by id, and related stages and matches
      parameters:
      - description: Elimination ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: success, return delete success message
          schema:
            $ref: '#/definitions/response.DeleteSuccessResponse'
        "400":
          description: invalid Elimination ID, maybe not exist, or already deleted
          schema:
            $ref: '#/definitions/response.ErrorIdResponse'
        "500":
          description: internal db error for Delete Elimination
          schema:
            $ref: '#/definitions/response.ErrorInternalErrorResponse'
      summary: Delete one Elimination, and related stages and matches
      tags:
      - Elimination
    get:
      description: Get only one Elimination by id
      parameters:
      - description: Elimination ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: success, return one Elimination without related data
          schema:
            allOf:
            - $ref: '#/definitions/database.Elimination'
            - properties:
                medals:
                  $ref: '#/definitions/response.Nill'
                player_sets:
                  $ref: '#/definitions/response.Nill'
                stages:
                  $ref: '#/definitions/response.Nill'
              type: object
        "400":
          description: invalid Elimination ID, maybe not exist
          schema:
            $ref: '#/definitions/response.ErrorIdResponse'
        "500":
          description: internal db error for Get Elimination
          schema:
            $ref: '#/definitions/response.ErrorInternalErrorResponse'
      summary: Show only one Elimination
      tags:
      - Elimination
  /elimination/currentend/minus/{id}:
    patch:
      description: Update one Elimination current end minus one by id
      parameters:
      - description: Elimination ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: success, return one Elimination with new current end
          schema:
            $ref: '#/definitions/response.Nill'
        "400":
          description: invalid Elimination ID, maybe not exist
          schema:
            $ref: '#/definitions/response.ErrorIdResponse'
        "500":
          description: internal db error for Update Elimination CurrentStage
          schema:
            $ref: '#/definitions/response.ErrorInternalErrorResponse'
      summary: Update one Elimination current end minus one
      tags:
      - Elimination
  /elimination/currentend/plus/{id}:
    patch:
      description: Update one Elimination current end plus one by id
      parameters:
      - description: Elimination ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: success, return one Elimination with new current end
          schema:
            $ref: '#/definitions/response.Nill'
        "400":
          description: invalid Elimination ID, maybe not exist
          schema:
            $ref: '#/definitions/response.ErrorIdResponse'
        "500":
          description: internal db error for Update Elimination CurrentStage
          schema:
            $ref: '#/definitions/response.ErrorInternalErrorResponse'
      summary: Update one Elimination current end plus one
      tags:
      - Elimination
  /elimination/currentstage/minus/{id}:
    patch:
      description: Update one Elimination current stage minus one by id
      parameters:
      - description: Elimination ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: success, return one Elimination with new current stage
          schema:
            $ref: '#/definitions/response.Nill'
        "400":
          description: invalid Elimination ID, maybe not exist
          schema:
            $ref: '#/definitions/response.ErrorIdResponse'
        "500":
          description: internal db error for Update Elimination CurrentStage
          schema:
            $ref: '#/definitions/response.ErrorInternalErrorResponse'
      summary: Update one Elimination current stage minus one
      tags:
      - Elimination
  /elimination/currentstage/plus/{id}:
    patch:
      description: Update one Elimination current stage plus one by id
      parameters:
      - description: Elimination ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: success, return one Elimination with new current stage
          schema:
            $ref: '#/definitions/response.Nill'
        "400":
          description: invalid Elimination ID, maybe not exist
          schema:
            $ref: '#/definitions/response.ErrorIdResponse'
        "500":
          description: internal db error for Update Elimination CurrentStage
          schema:
            $ref: '#/definitions/response.ErrorInternalErrorResponse'
      summary: Update one Elimination current stage plus one
      tags:
      - Elimination
  /elimination/match:
    post:
      consumes:
      - application/json
      description: |-
        Post one new Match data with 2 matchResults
        Each matchResults with 4 or 5 matchEnds with different teamSize
        Each matchEnds with 3, 4, 6 matchScores with different teamSize
        input PlayerSetIds should have 2 playerSets in the same elimination
        input LaneNumbers should have 2 laneNumbers for each playerset
      parameters:
      - description: Match
        in: body
        name: Match
        required: true
        schema:
          $ref: '#/definitions/endpoint.PostMatch.MatchData'
      produces:
      - application/json
      responses:
        "200":
          description: success, return one Match with new id
          schema:
            $ref: '#/definitions/database.Match'
        "400":
          description: invalid stage ID, maybe not exist, or player set id should
            be 2, lane numbers should be 2
          schema:
            $ref: '#/definitions/response.ErrorIdResponse'
        "500":
          description: internal db error for Create Match, MatchResult, MatchEnd,
            MatchScore, or get Stage
          schema:
            $ref: '#/definitions/response.ErrorInternalErrorResponse'
      summary: Create one Match
      tags:
      - Elimination
  /elimination/match/scores/{matchid}:
    get:
      description: Get one Match with matchResults, matchEnds, scores, playerSets,
        players by id
      parameters:
      - description: Match ID
        in: path
        name: matchid
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: success, return one Match with all related data
          schema:
            $ref: '#/definitions/database.Match'
        "400":
          description: invalid Match ID, maybe not exist
          schema:
            $ref: '#/definitions/response.ErrorIdResponse'
        "500":
          description: internal db error for Get Match
          schema:
            $ref: '#/definitions/response.ErrorInternalErrorResponse'
      summary: Show one Match with all related data
      tags:
      - Elimination
  /elimination/playersets/{id}:
    get:
      description: Get one Elimination with player sets by id
      parameters:
      - description: Elimination ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: success, return one Elimination with player sets
          schema:
            allOf:
            - $ref: '#/definitions/database.Elimination'
            - properties:
                medals:
                  $ref: '#/definitions/response.Nill'
                player_sets:
                  allOf:
                  - $ref: '#/definitions/database.PlayerSet'
                  - properties:
                      players:
                        $ref: '#/definitions/response.Nill'
                    type: object
                stages:
                  $ref: '#/definitions/response.Nill'
              type: object
        "400":
          description: invalid Elimination ID, maybe not exist
          schema:
            $ref: '#/definitions/response.ErrorIdResponse'
        "500":
          description: internal db error for Get Elimination
          schema:
            $ref: '#/definitions/response.ErrorInternalErrorResponse'
      summary: Show one Elimination with player sets
      tags:
      - Elimination
  /elimination/scores/{id}:
    get:
      description: Get one Elimination with stages, matches, matchResults, matchEnds,
        scores by id
      parameters:
      - description: Elimination ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: success, return one Elimination with all scores
          schema:
            allOf:
            - $ref: '#/definitions/database.Elimination'
            - properties:
                medals:
                  $ref: '#/definitions/response.Nill'
                player_sets:
                  $ref: '#/definitions/response.Nill'
              type: object
        "400":
          description: invalid Elimination ID, maybe not exist
          schema:
            $ref: '#/definitions/response.ErrorIdResponse'
        "500":
          description: internal db error for Get Elimination
          schema:
            $ref: '#/definitions/response.ErrorInternalErrorResponse'
      summary: Show one Elimination with all scores
      tags:
      - Elimination
  /elimination/stage:
    post:
      consumes:
      - application/json
      description: Post one new Stage data with new id
      parameters:
      - description: Stage
        in: body
        name: Stage
        required: true
        schema:
          $ref: '#/definitions/endpoint.PostStage.PostStageData'
      produces:
      - application/json
      responses:
        "200":
          description: success, return one Stage with new id
          schema:
            allOf:
            - $ref: '#/definitions/database.Stage'
            - properties:
                matchs:
                  $ref: '#/definitions/response.Nill'
              type: object
        "400":
          description: invalid elimination ID, maybe not exist
          schema:
            $ref: '#/definitions/response.ErrorIdResponse'
        "500":
          description: internal db error for Create Stage
          schema:
            $ref: '#/definitions/response.ErrorInternalErrorResponse'
      summary: Create one Stage
      tags:
      - Elimination
  /elimination/stages/matches/{id}:
    get:
      description: Get one Elimination with stages, matches by id
      parameters:
      - description: Elimination ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: success, return one Elimination with stages, matches
          schema:
            allOf:
            - $ref: '#/definitions/database.Elimination'
            - properties:
                medals:
                  $ref: '#/definitions/response.Nill'
                player_sets:
                  $ref: '#/definitions/response.Nill'
                stages:
                  allOf:
                  - $ref: '#/definitions/database.Stage'
                  - properties:
                      matches:
                        allOf:
                        - $ref: '#/definitions/database.Match'
                        - properties:
                            MatchResult:
                              $ref: '#/definitions/response.Nill'
                          type: object
                    type: object
              type: object
        "400":
          description: invalid Elimination ID, maybe not exist
          schema:
            $ref: '#/definitions/response.ErrorIdResponse'
        "500":
          description: internal db error for Get Elimination
          schema:
            $ref: '#/definitions/response.ErrorInternalErrorResponse'
      summary: Show one Elimination with stages, matches
      tags:
      - Elimination
  /elimination/stages/scores/medals/{id}:
    get:
      description: Get one Elimination with stages, matches, matchResults, matchEnds,
        scores, playerSets, players, medals by id
      parameters:
      - description: Elimination ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: success, return one Elimination with all related data
          schema:
            $ref: '#/definitions/database.Elimination'
        "400":
          description: invalid Elimination ID, maybe not exist
          schema:
            $ref: '#/definitions/response.ErrorIdResponse'
        "500":
          description: internal db error for Get Elimination
          schema:
            $ref: '#/definitions/response.ErrorInternalErrorResponse'
      summary: Show one Elimination with all related data
      tags:
      - Elimination
  /groupinfo:
    post:
      consumes:
      - application/json
      description: |-
        Post one new GroupInfo data with new id
        Create qualification with same id
        Auto write GroupIndex
        Auto create elimination
      parameters:
      - description: LaneData
        in: body
        name: GroupInfo
        required: true
        schema:
          $ref: '#/definitions/endpoint.PostGroupInfo.GroupData'
      produces:
      - application/json
      responses:
        "200":
          description: success, return new GroupInfo data
          schema:
            allOf:
            - $ref: '#/definitions/database.Group'
            - properties:
                players:
                  $ref: '#/definitions/response.Nill'
              type: object
        "400":
          description: invalid Competition ID, may not exist
          schema:
            $ref: '#/definitions/response.ErrorIdResponse'
        "500":
          description: database error for Create GroupInfo, Create Qualification,
            Create Elimination, get Competition
          schema:
            $ref: '#/definitions/response.ErrorInternalErrorResponse'
      summary: Create one GroupInfo
      tags:
      - GroupInfo
  /groupinfo/{id}:
    delete:
      consumes:
      - application/json
      description: |-
        Delete one GroupInfo by id, delete qualification,
        Change player to UnassignedGroup and UnassignedLane
        Update competition group_num
        Cannot delete UnassignedGroup
      parameters:
      - description: GroupInfo ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: success, delete GroupInfo by id
          schema:
            $ref: '#/definitions/response.DeleteSuccessResponse'
        "400":
          description: invalid GroupInfo ID, may not exist, or already deleted, or
            cannot delete UnassignedGroup
          schema:
            $ref: '#/definitions/response.ErrorIdResponse'
        "500":
          description: database error for Delete GroupInfo, Get PlayerIds, Update
            PlayerGroupId, Update PlayerLaneId, Delete Qualification, Delete GroupInfo,
            MinusOneCompetitionGroupNum
          schema:
            $ref: '#/definitions/response.ErrorInternalErrorResponse'
      summary: delete one GroupInfo
      tags:
      - GroupInfo
    get:
      description: Get only one GroupInfo by id
      parameters:
      - description: GroupInfo ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: success, get GroupInfo by id without related data
          schema:
            allOf:
            - $ref: '#/definitions/database.Group'
            - properties:
                players:
                  $ref: '#/definitions/response.Nill'
              type: object
        "400":
          description: invalid GroupInfo ID, may not exist
          schema:
            $ref: '#/definitions/response.ErrorIdResponse'
        "500":
          description: database error for Get GroupInfo
          schema:
            $ref: '#/definitions/response.ErrorInternalErrorResponse'
      summary: Show only one GroupInfo
      tags:
      - GroupInfo
    put:
      consumes:
      - application/json
      description: |-
        Put whole new GroupInfo and overwrite with the id
        Cannot overwrite CompetitionId
        Cannot overwrite UnassignedGroup
      parameters:
      - description: GroupInfo ID
        in: path
        name: id
        required: true
        type: integer
      - description: GroupInfo
        in: body
        name: GroupInfo
        required: true
        schema:
          $ref: '#/definitions/endpoint.PutGroupInfo.GroupData'
      produces:
      - application/json
      responses:
        "200":
          description: success, return new updated GroupInfo data
          schema:
            allOf:
            - $ref: '#/definitions/database.Group'
            - properties:
                players:
                  $ref: '#/definitions/response.Nill'
              type: object
        "400":
          description: invalid GroupInfo ID, may not exist, cannot update UnassignedGroup
          schema:
            $ref: '#/definitions/response.ErrorIdResponse'
        "500":
          description: database error for Update GroupInfo, Get GroupInfo
          schema:
            $ref: '#/definitions/response.ErrorInternalErrorResponse'
      summary: update one GroupInfo
      tags:
      - GroupInfo
  /groupinfo/ordering:
    patch:
      consumes:
      - application/json
      description: |-
        Put competition_id and group_ids to update GroupInfos Indices under the same Competition
        GroupIds cannot include UnassignedGroupId
        GroupIds length must be equal to Competition group_num
      parameters:
      - description: GroupInfo IDs for reorder
        in: body
        name: groupIdsForReorder
        required: true
        schema:
          $ref: '#/definitions/endpoint.groupIdsForReorder'
      produces:
      - application/json
      responses:
        "200":
          description: success, return new updated Competition data
          schema:
            allOf:
            - $ref: '#/definitions/database.Competition'
            - properties:
                groups:
                  allOf:
                  - $ref: '#/definitions/database.Group'
                  - properties:
                      players:
                        $ref: '#/definitions/response.Nill'
                    type: object
                participants:
                  $ref: '#/definitions/response.Nill'
              type: object
        "400":
          description: invalid Competition ID, group id, may not exist
          schema:
            $ref: '#/definitions/response.ErrorIdResponse'
        "500":
          description: database error for Update GroupInfo Index, Get Competition
          schema:
            $ref: '#/definitions/response.ErrorInternalErrorResponse'
      summary: update all GroupInfos Indices under the same Competition
      tags:
      - GroupInfo
  /groupinfo/players/{id}:
    get:
      description: Get one GroupInfo with players by id, usually ordered by rank
      parameters:
      - description: GroupInfo ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: success, get GroupInfo with players by id
          schema:
            allOf:
            - $ref: '#/definitions/database.Group'
            - properties:
                players:
                  allOf:
                  - $ref: '#/definitions/database.Player'
                  - properties:
                      player_sets:
                        $ref: '#/definitions/response.Nill'
                      rounds:
                        $ref: '#/definitions/response.Nill'
                    type: object
              type: object
        "400":
          description: invalid GroupInfo ID, may not exist
          schema:
            $ref: '#/definitions/response.ErrorIdResponse'
        "500":
          description: database error for Get GroupInfo with players
          schema:
            $ref: '#/definitions/response.ErrorInternalErrorResponse'
      summary: Show one GroupInfo with players
      tags:
      - GroupInfo
  /institution:
    get:
      description: Get all institution info from db.
      produces:
      - application/json
      responses:
        "200":
          description: success, return all institution info
          schema:
            items:
              $ref: '#/definitions/database.Institution'
            type: array
        "500":
          description: DB error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Get all institution info.
      tags:
      - Institution
    post:
      consumes:
      - application/json
      description: |-
        Add an institution to db.
        Cannot repeat institution name.
        Institution name cannot be empty.
      parameters:
      - description: institution's information
        in: body
        name: NewInstitutionInfo
        required: true
        schema:
          $ref: '#/definitions/endpoint.NewInstitutionInfo'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: empty institution name / institution name already exists
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: db error / get institution / add institution
          schema:
            $ref: '#/definitions/response.Response'
      summary: Create an institution.
      tags:
      - Institution
  /institution/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an institution from db.
      parameters:
      - description: institution's id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: invalid id
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: institution not found
          schema:
            $ref: '#/definitions/response.Response'
      summary: Delete an institution.
      tags:
      - Institution
    get:
      consumes:
      - application/json
      description: Get institution info from db by id.
      parameters:
      - description: institution's id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: success, return institution info
          schema:
            $ref: '#/definitions/database.Institution'
        "400":
          description: invalid institution id
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: no institution found
          schema:
            $ref: '#/definitions/response.Response'
      summary: Get institution info by id.
      tags:
      - Institution
  /lane/{id}:
    get:
      description: Get one Lane by id.
      parameters:
      - description: Lane ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: success, return lane
          schema:
            allOf:
            - $ref: '#/definitions/database.Lane'
            - properties:
                players:
                  $ref: '#/definitions/response.Nill'
              type: object
        "400":
          description: invalid lane id
          schema:
            $ref: '#/definitions/response.ErrorIdResponse'
        "500":
          description: internal db error / Get Lane By Id
          schema:
            $ref: '#/definitions/response.ErrorInternalErrorResponse'
      summary: Show one Lane.
      tags:
      - Lane
  /lane/all/{competitionid}:
    get:
      description: Get all Lanes and related data by competition id.
      parameters:
      - description: competition ID
        in: path
        name: competitionid
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: succsess, return lanes
          schema:
            items:
              allOf:
              - $ref: '#/definitions/database.Lane'
              - properties:
                  players:
                    $ref: '#/definitions/response.Nill'
                type: object
            type: array
        "400":
          description: invalid competition id
          schema:
            $ref: '#/definitions/response.ErrorIdResponse'
        "500":
          description: internal db error / Get All Lane By Competition ID
          schema:
            $ref: '#/definitions/response.ErrorInternalErrorResponse'
      summary: Show all Lanes and related data of a competition.
      tags:
      - Lane
  /lane/scores/{id}:
    get:
      description: Get one Lane with players, rounds, roundends, roundscores by id.
      parameters:
      - description: Lane ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: success, return lane
          schema:
            allOf:
            - $ref: '#/definitions/database.Lane'
            - properties:
                players:
                  allOf:
                  - $ref: '#/definitions/database.Player'
                  - properties:
                      player_sets:
                        $ref: '#/definitions/response.Nill'
                    type: object
              type: object
        "400":
          description: invalid lane id
          schema:
            $ref: '#/definitions/response.ErrorIdResponse'
        "500":
          description: internal db error / Get Lane With Scores By Id
          schema:
            $ref: '#/definitions/response.ErrorInternalErrorResponse'
      summary: Show one Lane with players, rounds, roundends, roundscores.
      tags:
      - Lane
  /matchresult/{id}:
    delete:
      description: Delete one MatchResult with matchEnds and matchScores by id
      parameters:
      - description: MatchResult ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: success, return nil
          schema:
            $ref: '#/definitions/response.Nill'
        "400":
          description: invalid match result ID, maybe not exist
          schema:
            $ref: '#/definitions/response.ErrorIdResponse'
        "500":
          description: internal db failed for deleting match result
          schema:
            $ref: '#/definitions/response.ErrorInternalErrorResponse'
      summary: Delete one MatchResult
      tags:
      - MatchResult
    get:
      description: Get one MatchResult with player set by id
      parameters:
      - description: MatchResult ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: success, return MatchResult with player set
          schema:
            allOf:
            - $ref: '#/definitions/database.MatchResult'
            - properties:
                match_ends:
                  $ref: '#/definitions/response.Nill'
                player_set:
                  allOf:
                  - $ref: '#/definitions/database.PlayerSet'
                  - properties:
                      players:
                        $ref: '#/definitions/response.Nill'
                    type: object
              type: object
        "400":
          description: invalid match result ID, maybe not exist
          schema:
            $ref: '#/definitions/response.ErrorIdResponse'
        "500":
          description: internal db failed for getting match result
          schema:
            $ref: '#/definitions/response.ErrorInternalErrorResponse'
      summary: Show one MatchResult with player set
      tags:
      - MatchResult
  /matchresult/iswinner/{id}:
    patch:
      consumes:
      - application/json
      description: Update one MatchResult isWinner by id
      parameters:
      - description: MatchResult ID
        in: path
        name: id
        required: true
        type: integer
      - description: MatchResult
        in: body
        name: MatchResult
        required: true
        schema:
          $ref: '#/definitions/endpoint.PutMatchResultIsWinnerById.matchResultIsWinnerData'
      responses:
        "200":
          description: success, return nil
          schema:
            $ref: '#/definitions/response.Nill'
        "400":
          description: invalid match result ID, maybe not exist
          schema:
            $ref: '#/definitions/response.ErrorIdResponse'
        "500":
          description: internal db failed for updating isWinner
          schema:
            $ref: '#/definitions/response.ErrorInternalErrorResponse'
      summary: Update one MatchResult isWinner
      tags:
      - MatchResult
  /matchresult/lanenumber/{id}:
    patch:
      consumes:
      - application/json
      description: Update one MatchResult laneNumber by id
      parameters:
      - description: MatchResult ID
        in: path
        name: id
        required: true
        type: integer
      - description: MatchResult
        in: body
        name: MatchResult
        required: true
        schema:
          $ref: '#/definitions/endpoint.PutMatchResultLaneNumberById.matchResultLaneNumberData'
      responses:
        "200":
          description: success, return nil
          schema:
            $ref: '#/definitions/response.Nill'
        "400":
          description: invalid match result ID, maybe not exist
          schema:
            $ref: '#/definitions/response.ErrorIdResponse'
        "500":
          description: internal db failed for updating laneNumber
          schema:
            $ref: '#/definitions/response.ErrorInternalErrorResponse'
      summary: Update one MatchResult laneNumber
      tags:
      - MatchResult
  /matchresult/matchend:
    post:
      consumes:
      - application/json
      description: |-
        Post one new MatchEnd data,
        Auto write totalScores IsConfirmed, and auto create matchScores by teamSize
        teamSize: 1, 2, 3
      parameters:
      - description: matchEndData
        in: body
        name: matchEndData
        required: true
        schema:
          $ref: '#/definitions/endpoint.PostMatchEnd.matchEndData'
      produces:
      - application/json
      responses:
        "200":
          description: success, return nil
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: invalid match result ID, maybe not exist
          schema:
            $ref: '#/definitions/response.ErrorReceiveDataResponse'
        "500":
          description: internal db failed for creating matchEnd, creating matchScores
          schema:
            $ref: '#/definitions/response.ErrorInternalErrorResponse'
      summary: Create one MatchEnd
      tags:
      - MatchEnd
  /matchresult/matchend/isconfirmed/{id}:
    patch:
      consumes:
      - application/json
      description: Update one MatchEnd isConfirmed by id
      parameters:
      - description: MatchEnd ID
        in: path
        name: id
        required: true
        type: integer
      - description: MatchEnd
        in: body
        name: MatchEnd
        required: true
        schema:
          $ref: '#/definitions/endpoint.PutMatchEndsIsConfirmedById.matchEndIsConfirmedData'
      responses:
        "200":
          description: success, return nil
          schema:
            $ref: '#/definitions/response.Nill'
        "400":
          description: invalid match end ID, maybe not exist
          schema:
            $ref: '#/definitions/response.ErrorIdResponse'
        "500":
          description: internal db failed for updating isConfirmed
          schema:
            $ref: '#/definitions/response.ErrorInternalErrorResponse'
      summary: Update one MatchEnd isConfirmed
      tags:
      - MatchEnd
  /matchresult/matchend/scores/{id}:
    patch:
      consumes:
      - application/json
      description: |-
        Update one MatchEnd totalScores by id and all related MatchScores by MatchScore ids
        MatchScore ids and scores must be the same length
      parameters:
      - description: MatchEnd ID
        in: path
        name: id
        required: true
        type: integer
      - description: matchEndScoresData
        in: body
        name: matchEndScoresData
        required: true
        schema:
          $ref: '#/definitions/endpoint.PutMatchEndsScoresById.matchEndScoresData'
      responses:
        "200":
          description: success, return nil
          schema:
            $ref: '#/definitions/response.Nill'
        "400":
          description: invalid match end ID, maybe not exist, or matchScore ids not
            exist, or matchScore ids and scores length not match
          schema:
            $ref: '#/definitions/response.ErrorIdResponse'
        "500":
          description: internal db failed for updating scores
          schema:
            $ref: '#/definitions/response.ErrorInternalErrorResponse'
      summary: Update one MatchEnd scores
      tags:
      - MatchEnd
  /matchresult/matchend/totalscore/{id}:
    patch:
      consumes:
      - application/json
      description: Update one MatchEnd totalScores by id
      parameters:
      - description: MatchEnd ID
        in: path
        name: id
        required: true
        type: integer
      - description: MatchEnd
        in: body
        name: MatchEnd
        required: true
        schema:
          $ref: '#/definitions/endpoint.PutMatchEndsTotalScoresById.matchEndTotalScoresData'
      responses:
        "200":
          description: success, return nil
          schema:
            $ref: '#/definitions/response.Nill'
        "400":
          description: invalid match end ID, maybe not exist
          schema:
            $ref: '#/definitions/response.ErrorIdResponse'
        "500":
          description: internal db failed for updating totalScores
          schema:
            $ref: '#/definitions/response.ErrorInternalErrorResponse'
      summary: Update one MatchEnd totalScores
      tags:
      - MatchEnd
  /matchresult/matchscore/score/{id}:
    patch:
      consumes:
      - application/json
      description: |-
        Update one MatchScore score by id
        Also update related MatchEnd totalScores
      parameters:
      - description: MatchScore ID
        in: path
        name: id
        required: true
        type: integer
      - description: MatchScore
        in: body
        name: MatchScore
        required: true
        schema:
          $ref: '#/definitions/endpoint.PutMatchScoreScoreById.matchScoreData'
      responses:
        "200":
          description: success, return nil
          schema:
            $ref: '#/definitions/response.Nill'
        "400":
          description: invalid match score ID, maybe not exist
          schema:
            $ref: '#/definitions/response.ErrorIdResponse'
        "500":
          description: internal db failed for updating score, get matchEnd by id,
            get matchScore, update matchEnd totalScores
          schema:
            $ref: '#/definitions/response.ErrorInternalErrorResponse'
      summary: Update one MatchScore score
      tags:
      - MatchScore
  /matchresult/scores/{id}:
    get:
      description: Get one MatchResult with match_ends, match_scores, player set by
        id
      parameters:
      - description: MatchResult ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: success, return MatchResult with scores
          schema:
            allOf:
            - $ref: '#/definitions/database.MatchResult'
            - properties:
                player_set:
                  allOf:
                  - $ref: '#/definitions/database.PlayerSet'
                  - properties:
                      players:
                        $ref: '#/definitions/response.Nill'
                    type: object
              type: object
        "400":
          description: invalid match result ID, maybe not exist
          schema:
            $ref: '#/definitions/response.ErrorIdResponse'
        "500":
          description: internal db failed for getting match result with scores
          schema:
            $ref: '#/definitions/response.ErrorInternalErrorResponse'
      summary: Show one MatchResult with match_ends, match_scores, player set
      tags:
      - MatchResult
  /matchresult/shootoffscore/{id}:
    patch:
      consumes:
      - application/json
      description: Update one MatchResult shootOffScore by id
      parameters:
      - description: MatchResult ID
        in: path
        name: id
        required: true
        type: integer
      - description: MatchResult
        in: body
        name: MatchResult
        required: true
        schema:
          $ref: '#/definitions/endpoint.PutMatchResultShootOffScoreById.matchResultShootOffScoreData'
      responses:
        "200":
          description: success, return nil
          schema:
            $ref: '#/definitions/response.Nill'
        "400":
          description: invalid match result ID, maybe not exist
          schema:
            $ref: '#/definitions/response.ErrorIdResponse'
        "500":
          description: internal db failed for updating shootOffScore
          schema:
            $ref: '#/definitions/response.ErrorInternalErrorResponse'
      summary: Update one MatchResult shootOffScore
      tags:
      - MatchResult
  /matchresult/totalpoints/{id}:
    patch:
      consumes:
      - application/json
      description: Update one MatchResult totalPoints by id
      parameters:
      - description: MatchResult ID
        in: path
        name: id
        required: true
        type: integer
      - description: MatchResult
        in: body
        name: MatchResult
        required: true
        schema:
          $ref: '#/definitions/endpoint.PutMatchResultTotalPointsById.matchResultTotalPointsData'
      responses:
        "200":
          description: success, return nil
          schema:
            $ref: '#/definitions/response.Nill'
        "400":
          description: invalid match result ID, maybe not exist
          schema:
            $ref: '#/definitions/response.ErrorIdResponse'
        "500":
          description: internal db failed for updating totalPoints
          schema:
            $ref: '#/definitions/response.ErrorInternalErrorResponse'
      summary: Update one MatchResult totalPoints
      tags:
      - MatchResult
  /medal/{id}:
    get:
      description: Get one medal by id.
      parameters:
      - description: Medal ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: success, return one medal
          schema:
            $ref: '#/definitions/database.Medal'
        "400":
          description: invalid medal id
          schema:
            $ref: '#/definitions/response.ErrorIdResponse'
        "500":
          description: internal db error / Get Medal By Id
          schema:
            $ref: '#/definitions/response.ErrorInternalErrorResponse'
      summary: Show one medal by id.
      tags:
      - Medal
  /medal/elimination/{eliminationid}:
    get:
      description: Get medals of elimination by elimination id.
      parameters:
      - description: elimination ID
        in: path
        name: eliminationid
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: success, return medals of elimination
          schema:
            items:
              $ref: '#/definitions/database.Medal'
            type: array
        "400":
          description: invalid elimination id
          schema:
            $ref: '#/definitions/response.ErrorIdResponse'
        "500":
          description: internal db error / Get Medal Info By Elimination Id
          schema:
            $ref: '#/definitions/response.ErrorInternalErrorResponse'
      summary: Show medals of elimination by elimination id.
      tags:
      - Medal
  /medal/playersetid/{id}:
    patch:
      description: Update medal's player set id by id.
      parameters:
      - description: Medal ID
        in: path
        name: id
        required: true
        type: integer
      - description: PlayerSetId
        in: body
        name: PlayerSetId
        required: true
        schema:
          $ref: '#/definitions/endpoint.PutMedalPlayerSetIdById.RequestBody'
      produces:
      - application/json
      responses:
        "200":
          description: success, return nil
        "400":
          description: invalid medal id / invalid playerset id / elimination id of
            medal and playerset is not same
          schema:
            $ref: '#/definitions/response.ErrorIdResponse'
        "500":
          description: internal db error / Get Medal By Id / Get Player Set By Id
            / Update Medal PLayer Set Id
          schema:
            $ref: '#/definitions/response.ErrorInternalErrorResponse'
      summary: Update medal's player set id by id.
      tags:
      - Medal
  /participant:
    post:
      consumes:
      - application/json
      description: |-
        Post a particpant to the competition from the user.
        Cannot repeat participant.
        Role cannot be empty.
        Status is always initialized as "pending".
      parameters:
      - description: role
        in: body
        name: NewParticipantInfo
        required: true
        schema:
          $ref: '#/definitions/endpoint.NewParticipantInfo'
      produces:
      - application/json
      responses:
        "200":
          description: success, return participant
          schema:
            $ref: '#/definitions/database.Participant'
        "400":
          description: invalid info / role is empty / participant exists / invalid
            user ID / invalid competition ID
          schema:
            $ref: '#/definitions/response.ErrorReceiveDataFormatResponse'
        "500":
          description: db error
          schema:
            $ref: '#/definitions/response.ErrorInternalErrorResponse'
      summary: Post a particpant to the competition.
      tags:
      - Participant
  /participant/{id}:
    delete:
      description: |-
        Delete one Participant by id.
        This api is intentionally designed not to delete related data, because a user may drop out of competition, but competition still need the record.
      parameters:
      - description: Participant ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/response.DeleteSuccessResponse'
        "400":
          description: invalid participant id
          schema:
            $ref: '#/definitions/response.ErrorIdResponse'
        "500":
          description: internal db error / Delete Participant
          schema:
            $ref: '#/definitions/response.ErrorInternalErrorResponse'
      summary: Delete one Participant.
      tags:
      - Participant
    get:
      description: Get One Participant By ID.
      parameters:
      - description: Participant ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: success, return participant
          schema:
            $ref: '#/definitions/database.Participant'
        "400":
          description: invalid participant id
          schema:
            $ref: '#/definitions/response.ErrorIdResponse'
        "500":
          description: db error
          schema:
            $ref: '#/definitions/response.ErrorInternalErrorResponse'
      summary: Show One Participant By ID.
      tags:
      - Participant
    put:
      consumes:
      - application/json
      description: Put whole new Participant.
      parameters:
      - description: Participant ID
        in: path
        name: id
        required: true
        type: integer
      - description: Participant
        in: body
        name: Participant
        required: true
        schema:
          $ref: '#/definitions/endpoint.PutParticipant.PutParticipantData'
      produces:
      - application/json
      responses:
        "200":
          description: success, return updated participant
          schema:
            $ref: '#/definitions/database.Participant'
        "400":
          description: invalid participant id
          schema:
            $ref: '#/definitions/response.ErrorIdResponse'
        "500":
          description: internal db error / Update Participant
          schema:
            $ref: '#/definitions/response.ErrorInternalErrorResponse'
      summary: Update one Participant.
      tags:
      - Participant
  /participant/competition/{competitionid}:
    get:
      description: Get Participants by competition ID, including realname.
      parameters:
      - description: competition ID
        in: path
        name: competitionid
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: success, return participants of the competition
          schema:
            items:
              $ref: '#/definitions/endpoint.ParticipantWName'
            type: array
        "400":
          description: invalid competition id
          schema:
            $ref: '#/definitions/response.ErrorIdResponse'
        "500":
          description: internal db error / Get participants by competition id / Get
            user by id
          schema:
            $ref: '#/definitions/response.ErrorInternalErrorResponse'
      summary: Show Participants by competition ID.
      tags:
      - Participant
  /participant/competition/user/{competitionid}/{userid}:
    get:
      description: Get Participants By competition ID and user ID
      parameters:
      - description: competition ID
        in: path
        name: competitionid
        required: true
        type: integer
      - description: user ID
        in: path
        name: userid
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: success, return participants of the competition and user
          schema:
            items:
              $ref: '#/definitions/database.Participant'
            type: array
        "400":
          description: invalid user id / invalid competition id
          schema:
            $ref: '#/definitions/response.ErrorIdResponse'
        "500":
          description: internal db error / Get participants by competition id and
            user id
          schema:
            $ref: '#/definitions/response.ErrorInternalErrorResponse'
      summary: Show Participants By competition ID and user ID
      tags:
      - Participant
  /participant/user/{userid}:
    get:
      description: Get Participants By user ID.
      parameters:
      - description: user ID
        in: path
        name: userid
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: success, return participants of the user
          schema:
            items:
              $ref: '#/definitions/database.Participant'
            type: array
        "400":
          description: invalid user id
          schema:
            $ref: '#/definitions/response.ErrorIdResponse'
        "500":
          description: internal db error / Get participants by user id / Get user
          schema:
            $ref: '#/definitions/response.ErrorInternalErrorResponse'
      summary: Show Participants By user ID.
      tags:
      - Participant
  /player/{id}:
    delete:
      description: Delete one Player by id, delete related round, roundend, roundscore
        data, and playerNum minus one in lane.
      parameters:
      - description: Player ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: successfully delete player
          schema:
            $ref: '#/definitions/response.DeleteSuccessResponse'
        "400":
          description: invalid player id parameter, may not exist
          schema:
            $ref: '#/definitions/response.ErrorIdResponse'
        "500":
          description: internal db error for deleting player
          schema:
            $ref: '#/definitions/response.ErrorInternalErrorResponse'
      summary: Delete one Player by id.
      tags:
      - Player
    get:
      description: Get one Player without other data by id.
      parameters:
      - description: Player ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: success, return player without rounds, player sets
          schema:
            allOf:
            - $ref: '#/definitions/database.Player'
            - properties:
                player_sets:
                  $ref: '#/definitions/response.Nill'
                rounds:
                  $ref: '#/definitions/response.Nill'
              type: object
        "400":
          description: invalid player id parameter, may not exist
          schema:
            $ref: '#/definitions/response.ErrorIdResponse'
        "500":
          description: internal db error / Get player
          schema:
            $ref: '#/definitions/response.ErrorInternalErrorResponse'
      summary: Show one Player info without other data.
      tags:
      - Player
  /player/{participantid}:
    post:
      description: |-
        Create one Player by participant id.
        Create related rounds by laneNum of competition, create 6 roundscores for each 6 roundends, UnassignedLane playerNum ++.
        Order is 0, TotalScore is 0, ShootOffScore is -1, Rank is 0.
        Group is unassigned group, Lane is unassigned lane.
        Will copy data from participant, user, competition.
      parameters:
      - description: Participant ID
        in: path
        name: participantid
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: success, return player info
          schema:
            allOf:
            - $ref: '#/definitions/database.Player'
            - properties:
                player_sets:
                  $ref: '#/definitions/response.Nill'
                rounds:
                  $ref: '#/definitions/response.Nill'
              type: object
        "400":
          description: invalid participant id parameter, may not exist
          schema:
            $ref: '#/definitions/response.ErrorIdResponse'
        "500":
          description: internal db error / create player / create round / create roundend
            / create roundscore
          schema:
            $ref: '#/definitions/response.ErrorInternalErrorResponse'
      summary: Create one Player by Participant ID.
      tags:
      - Player
  /player/all-endscores/{endid}:
    patch:
      consumes:
      - application/json
      description: |-
        Update all scores of one end by end id
        Will auto update player total score
        Should have a 6 element array scores array
      parameters:
      - description: End ID
        in: path
        name: endid
        required: true
        type: integer
      - description: Scores
        in: body
        name: scores
        required: true
        schema:
          $ref: '#/definitions/endpoint.PutPlayerAllEndScoresByEndId.EndScores'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/response.Nill'
        "400":
          description: invalid end id / length of scores not equal to 6
          schema:
            $ref: '#/definitions/response.ErrorIdResponse'
        "500":
          description: internal db error / updating player end scores / get round
            score ids
          schema:
            $ref: '#/definitions/response.ErrorInternalErrorResponse'
      summary: Update all scores of one end by end id
      tags:
      - Player
  /player/dummy/{participantid}:
    get:
      description: Get dummy players by participant id.
      parameters:
      - description: Participant ID
        in: path
        name: participantid
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: success, show dummy players info
          schema:
            items:
              allOf:
              - $ref: '#/definitions/database.Player'
              - properties:
                  player_sets:
                    $ref: '#/definitions/response.Nill'
                  rounds:
                    $ref: '#/definitions/response.Nill'
                type: object
            type: array
        "400":
          description: invalid participant id parameter, may not exist
          schema:
            $ref: '#/definitions/response.ErrorIdResponse'
        "500":
          description: internal db error / Get dummy players
          schema:
            $ref: '#/definitions/response.ErrorInternalErrorResponse'
      summary: Show dummy players.
      tags:
      - Player
  /player/dummy/{playerid}:
    post:
      description: Create dummy player by player id.
      parameters:
      - description: Player ID
        in: path
        name: playerid
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: success, show dummy player info
          schema:
            allOf:
            - $ref: '#/definitions/database.Player'
            - properties:
                player_sets:
                  $ref: '#/definitions/response.Nill'
                rounds:
                  $ref: '#/definitions/response.Nill'
              type: object
        "400":
          description: invalid player id parameter, may not exist
          schema:
            $ref: '#/definitions/response.ErrorIdResponse'
        "500":
          description: internal db error / Creating player / Get player / Get participant
            / Get competition unassigned lane id / Get competition unassigned group
            id
          schema:
            $ref: '#/definitions/response.ErrorInternalErrorResponse'
      summary: Create dummy player.
      tags:
      - Player
  /player/group/{id}:
    patch:
      consumes:
      - application/json
      description: Update one Player groupId by id, and change player laneid to Unassigned
        lane.
      parameters:
      - description: Player ID
        in: path
        name: id
        required: true
        type: integer
      - description: UpdateGroupIdData
        in: body
        name: groupid
        required: true
        schema:
          $ref: '#/definitions/endpoint.PutPlayerGroupId.UpdateGroupIdData'
      produces:
      - application/json
      responses:
        "200":
          description: success, return player info
          schema:
            allOf:
            - $ref: '#/definitions/database.Player'
            - properties:
                player_sets:
                  $ref: '#/definitions/response.Nill'
                rounds:
                  $ref: '#/definitions/response.Nill'
              type: object
        "400":
          description: invalid player id / invalid group id parameter, may not exist
          schema:
            $ref: '#/definitions/response.ErrorIdResponse'
        "500":
          description: internal db error / updating player groupId / get player info
            / get unassigned lane id
          schema:
            $ref: '#/definitions/response.ErrorInternalErrorResponse'
      summary: Update one Player groupId by id.
      tags:
      - Player
  /player/isconfirmed/{roundendid}:
    patch:
      consumes:
      - application/json
      description: Update one Player isConfirmed by id.
      parameters:
      - description: RoundEnd ID
        in: path
        name: roundendid
        required: true
        type: integer
      - description: UpdateIsConfirmedData
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/endpoint.PutPlayerIsConfirmed.UpdateIsConfirmedData'
      produces:
      - application/json
      responses:
        "200":
          description: success, return nil
          schema:
            $ref: '#/definitions/response.Nill'
        "400":
          description: invalid roundend id parameter, may not exist
          schema:
            $ref: '#/definitions/response.ErrorIdResponse'
        "500":
          description: internal db error for updating player isConfirmed
          schema:
            $ref: '#/definitions/response.ErrorInternalErrorResponse'
      summary: Update one Player isConfirmed by id.
      tags:
      - Player
  /player/lane-order/{id}:
    patch:
      consumes:
      - application/json
      description: Update one Player order and landID By by id.
      parameters:
      - description: Player ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update LaneID & Order Data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/endpoint.PatchPlayerLaneOrder.UpdateLaneIdOrderData'
      produces:
      - application/json
      responses:
        "200":
          description: success, return player info
          schema:
            allOf:
            - $ref: '#/definitions/database.Player'
            - properties:
                player_sets:
                  $ref: '#/definitions/response.Nill'
                rounds:
                  $ref: '#/definitions/response.Nill'
              type: object
        "400":
          description: invalid player id / invalid lane id / invalid order parameter
          schema:
            $ref: '#/definitions/response.ErrorIdResponse'
        "500":
          description: internal db error / updating player order / updating player
            laneid / get player info
          schema:
            $ref: '#/definitions/response.ErrorInternalErrorResponse'
      summary: Update one Player order and landID By by id.
      tags:
      - Player
  /player/lane/{id}:
    patch:
      consumes:
      - application/json
      description: Update one Player laneId by id, update lane playernum.
      parameters:
      - description: Player ID
        in: path
        name: id
        required: true
        type: integer
      - description: UpdateLaneIdData
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/endpoint.PutPlayerLaneId.UpdateLaneIdData'
      produces:
      - application/json
      responses:
        "200":
          description: success, return player info
          schema:
            allOf:
            - $ref: '#/definitions/database.Player'
            - properties:
                player_sets:
                  $ref: '#/definitions/response.Nill'
                rounds:
                  $ref: '#/definitions/response.Nill'
              type: object
        "400":
          description: invalid player id / invalid lane id parameter
          schema:
            $ref: '#/definitions/response.ErrorIdResponse'
        "500":
          description: internal db error / updating player laneid / get player info
          schema:
            $ref: '#/definitions/response.ErrorInternalErrorResponse'
      summary: Update one Player laneId by id.
      tags:
      - Player
  /player/order/{id}:
    patch:
      consumes:
      - application/json
      description: Update one Player order by id.
      parameters:
      - description: Player ID
        in: path
        name: id
        required: true
        type: integer
      - description: UpdateOrderData
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/endpoint.PutPlayerOrder.UpdateOrderData'
      produces:
      - application/json
      responses:
        "200":
          description: success, return player info
          schema:
            allOf:
            - $ref: '#/definitions/database.Player'
            - properties:
                player_sets:
                  $ref: '#/definitions/response.Nill'
                rounds:
                  $ref: '#/definitions/response.Nill'
              type: object
        "400":
          description: invalid player id parameter, may not exist
          schema:
            $ref: '#/definitions/response.ErrorIdResponse'
        "500":
          description: internal db error / updating player order / get player info
          schema:
            $ref: '#/definitions/response.ErrorInternalErrorResponse'
      summary: Update one Player order by id.
      tags:
      - Player
  /player/playersets/{id}/{eliminationid}:
    get:
      description: Get one Player with player sets by id and elimination id.
      parameters:
      - description: Player ID
        in: path
        name: id
        required: true
        type: integer
      - description: Elimination ID
        in: path
        name: eliminationid
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: success, return player with player sets
          schema:
            allOf:
            - $ref: '#/definitions/database.Player'
            - properties:
                player_sets:
                  items:
                    allOf:
                    - $ref: '#/definitions/database.PlayerSet'
                    - properties:
                        players:
                          $ref: '#/definitions/response.Nill'
                      type: object
                  type: array
                rounds:
                  $ref: '#/definitions/response.Nill'
              type: object
        "400":
          description: invalid player id parameter / invalid elimination id parameter
          schema:
            $ref: '#/definitions/response.ErrorIdResponse'
        "500":
          description: internal db error / Get player with player sets
          schema:
            $ref: '#/definitions/response.ErrorInternalErrorResponse'
      summary: Show one Player with player sets.
      tags:
      - Player
  /player/refresh/totalscores/{competitionid}:
    patch:
      consumes:
      - application/json
      description: Refresh all player qualification total scores in a compeition by
        competition id.
      parameters:
      - description: Competition ID
        in: path
        name: competitionid
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/response.Nill'
        "400":
          description: invalid competition id parameter, may not exist
          schema:
            $ref: '#/definitions/response.ErrorIdResponse'
        "500":
          description: internal db error / get competition / get groups / get players
            / update player total score
          schema:
            $ref: '#/definitions/response.ErrorInternalErrorResponse'
      summary: Refresh all player qualification total scores in a compeition by competition
        id.
      tags:
      - Player
  /player/roundend:
    post:
      consumes:
      - application/json
      description: |-
        Just in case api.
        Create one RoundEnd by round id, IsComfirmed is false.
        Should not be used, just in case function, PostPlayer is used to create player, rounds, roundends, roundscores.
      parameters:
      - description: RoundEnd
        in: body
        name: RoundEnd
        required: true
        schema:
          allOf:
          - $ref: '#/definitions/endpoint.PostRoundEnd.RoundEndData'
          - properties:
              round_scores:
                $ref: '#/definitions/response.Nill'
            type: object
      produces:
      - application/json
      responses:
        "200":
          description: success, return roundend info
          schema:
            $ref: '#/definitions/database.RoundEnd'
        "400":
          description: invalid round id parameter, may not exist
          schema:
            $ref: '#/definitions/response.ErrorIdResponse'
        "500":
          description: internal db error / creating roundend
          schema:
            $ref: '#/definitions/response.ErrorInternalErrorResponse'
      summary: Create one RoundEnd by Round ID.
      tags:
      - Player
  /player/roundscore:
    post:
      consumes:
      - application/json
      description: |-
        Just in case api.
        Need to modify to refresh total scores.
        Create one RoundScore by roundend id.
        Update total score in player, round, roundend for one arrow score.
        Should not be used, just in case function, PostPlayer is used to create player, rounds, roundends, roundscores.
      parameters:
      - description: RoundScore
        in: body
        name: RoundScore
        required: true
        schema:
          $ref: '#/definitions/endpoint.UpdateTotalScoreData'
      produces:
      - application/json
      responses:
        "200":
          description: success, return roundscore info
          schema:
            $ref: '#/definitions/database.RoundScore'
        "400":
          description: invalid roundend id / invalid player id / invalid round id
            parameter, may not exist
          schema:
            $ref: '#/definitions/response.ErrorIdResponse'
        "500":
          description: internal db error / creating roundscore / get old score / update
            total score
          schema:
            $ref: '#/definitions/response.ErrorInternalErrorResponse'
      summary: Create one RoundScore by RoundEnd ID.
      tags:
      - Player
  /player/roundscore/{roundscoreid}:
    patch:
      consumes:
      - application/json
      description: |-
        Update one Player score by id.
        Will auto update player total score.
      parameters:
      - description: RoundScore ID
        in: path
        name: roundscoreid
        required: true
        type: integer
      - description: UpdateTotalScoreData
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/endpoint.UpdateTotalScoreData'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/response.Nill'
        "400":
          description: invalid roundscore id / player id / round id / roundend id
          schema:
            $ref: '#/definitions/response.ErrorIdResponse'
        "500":
          description: internal db error / updating player score / get old score /
            update total score
          schema:
            $ref: '#/definitions/response.ErrorInternalErrorResponse'
      summary: Update one Player score by id.
      tags:
      - Player
  /player/scores/{id}:
    get:
      description: Get one Player with rounds, roundends, roundscores by id.
      parameters:
      - description: Player ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: success, show rounds, roundends, roundscores, but no player
            sets
          schema:
            allOf:
            - $ref: '#/definitions/database.Player'
            - properties:
                player_sets:
                  $ref: '#/definitions/response.Nill'
                rounds:
                  allOf:
                  - $ref: '#/definitions/database.Round'
                  - properties:
                      round_ends:
                        allOf:
                        - $ref: '#/definitions/database.RoundEnd'
                        - properties:
                            round_scores:
                              $ref: '#/definitions/database.RoundScore'
                          type: object
                    type: object
              type: object
        "400":
          description: invalid player id parameter, may not exist
          schema:
            $ref: '#/definitions/response.ErrorIdResponse'
        "500":
          description: internal db error / Get player with scores
          schema:
            $ref: '#/definitions/response.ErrorInternalErrorResponse'
      summary: Show one Player with scores.
      tags:
      - Player
  /player/shootoffscore/{id}:
    patch:
      consumes:
      - application/json
      description: Update one Player shootoffScore by id.
      parameters:
      - description: Player ID
        in: path
        name: id
        required: true
        type: integer
      - description: UpdateShootoffScoreData
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/endpoint.PutPlayerShootoffScore.UpdateShootoffScoreData'
      produces:
      - application/json
      responses:
        "200":
          description: success, return player info
          schema:
            allOf:
            - $ref: '#/definitions/database.Player'
            - properties:
                player_sets:
                  $ref: '#/definitions/response.Nill'
                rounds:
                  $ref: '#/definitions/response.Nill'
              type: object
        "400":
          description: invalid player id parameter, may not exist
          schema:
            $ref: '#/definitions/response.ErrorIdResponse'
        "500":
          description: internal db error for updating player shootoffScore / get player
            info
          schema:
            $ref: '#/definitions/response.ErrorInternalErrorResponse'
      summary: Update one Player shootoffScore by id.
      tags:
      - Player
  /player/totalscore/{id}:
    patch:
      consumes:
      - application/json
      description: |-
        Just in case api.
        Update one Player total score by id.
      parameters:
      - description: Player ID
        in: path
        name: id
        required: true
        type: integer
      - description: UpdateTotalScoreData
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/endpoint.PutPlayerTotalScoreByplayerId.UpdateTotalScoreData'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/response.Nill'
        "204":
          description: no change
          schema:
            $ref: '#/definitions/response.Nill'
        "400":
          description: invalid player id parameter, may not exist
          schema:
            $ref: '#/definitions/response.ErrorIdResponse'
        "500":
          description: internal db error for updating player total score
          schema:
            $ref: '#/definitions/response.ErrorInternalErrorResponse'
      summary: Update one Player total score by id.
      tags:
      - Player
  /playerset:
    post:
      consumes:
      - application/json
      description: |-
        Post player set, and build player set match table
        If team size is 1, set name will be player name
      parameters:
      - description: Player Set Data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/endpoint.PostPlayerSet.playerSetData'
      produces:
      - application/json
      responses:
        "200":
          description: success, return player set without players
          schema:
            allOf:
            - $ref: '#/definitions/database.PlayerSet'
            - properties:
                players:
                  $ref: '#/definitions/response.Nill'
              type: object
        "400":
          description: invalid elimination id, player id maybe not exist / player
            set's length and teamsize does not match
          schema:
            $ref: '#/definitions/response.ErrorIdResponse'
        "500":
          description: internal db error for create player set / get player / create
            player set match table / get elimination
          schema:
            $ref: '#/definitions/response.ErrorInternalErrorResponse'
      summary: Post player set
      tags:
      - PlayerSet
  /playerset/{id}:
    delete:
      description: Delete player set, and delete player set match table
      parameters:
      - description: Player Set ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/response.DeleteSuccessResponse'
        "400":
          description: invalid plyer set id
          schema:
            $ref: '#/definitions/response.ErrorIdResponse'
        "500":
          description: internal db error / Get Player Set By Id / Delete Player Set
            Match Table By Player Set Id / Delete Player Set By Id
          schema:
            $ref: '#/definitions/response.ErrorInternalErrorResponse'
      summary: Delete player set
      tags:
      - PlayerSet
    get:
      description: Get player set with players by id
      parameters:
      - description: Player Set ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: success, return player set with players
          schema:
            allOf:
            - $ref: '#/definitions/database.PlayerSet'
            - properties:
                players:
                  allOf:
                  - $ref: '#/definitions/database.Player'
                  - properties:
                      player_sets:
                        $ref: '#/definitions/response.Nill'
                      rounds:
                        $ref: '#/definitions/response.Nill'
                    type: object
              type: object
        "400":
          description: invalid player set id, maybe not exist
          schema:
            $ref: '#/definitions/response.ErrorIdResponse'
        "500":
          description: internal error for get player set by id
          schema:
            $ref: '#/definitions/response.ErrorInternalErrorResponse'
      summary: Get player set with players by id
      tags:
      - PlayerSet
  /playerset/elimination/{eliminationid}:
    get:
      description: Get all player sets by elimination id
      parameters:
      - description: Elimination ID
        in: path
        name: eliminationid
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/database.PlayerSet'
            type: array
        "400":
          description: invalid player set id
          schema:
            $ref: '#/definitions/response.ErrorIdResponse'
        "500":
          description: internal db error / Get Player Sets By Elimination Id
          schema:
            $ref: '#/definitions/response.ErrorInternalErrorResponse'
      summary: Get all player sets by elimination id
      tags:
      - PlayerSet
  /playerset/elimination/medal/{eliminationid}:
    get:
      description: Get player sets which have medals by elimination id
      parameters:
      - description: Elimination ID
        in: path
        name: eliminationid
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            items:
              $ref: '#/definitions/endpoint.GetPlayerSetsByMedalByEliminationId.playerSetData'
            type: array
        "400":
          description: invalid elimination id
          schema:
            $ref: '#/definitions/response.ErrorIdResponse'
        "500":
          description: internal db error / Get Medal Info By Elimination Id
          schema:
            $ref: '#/definitions/response.ErrorInternalErrorResponse'
      summary: Get player sets which have medals by elimination id
      tags:
      - PlayerSet
  /playerset/name/{id}:
    patch:
      consumes:
      - application/json
      description: Put player set name
      parameters:
      - description: Player Set ID
        in: path
        name: id
        required: true
        type: integer
      - description: Player Set Data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/endpoint.PutPlayerSetName.playerSetData'
      produces:
      - application/json
      responses:
        "200":
          description: success
        "400":
          description: teamsize of elimination should not be 1
          schema:
            $ref: '#/definitions/response.ErrorReceiveDataFormatResponse'
        "500":
          description: internal db error / Get Player Set By Id / Update Player Set
            Name
          schema:
            $ref: '#/definitions/response.ErrorInternalErrorResponse'
      summary: Put player set name
      tags:
      - PlayerSet
  /playerset/preranking/{eliminationid}:
    patch:
      description: Put player set rank by elimination id
      parameters:
      - description: Elimination ID
        in: path
        name: eliminationid
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: success
        "500":
          description: internal db error / Get Elimination Player Set Id Rank Order
            By Id / Update Player Set Rank
          schema:
            $ref: '#/definitions/response.ErrorInternalErrorResponse'
      summary: Put player set rank
      tags:
      - PlayerSet
  /qualification/{id}:
    get:
      description: Get one Qualification without Lanes by id.
      parameters:
      - description: Qualification ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: success, return Qualification without lanes
          schema:
            allOf:
            - $ref: '#/definitions/database.Qualification'
            - properties:
                lanes:
                  $ref: '#/definitions/response.Nill'
              type: object
        "400":
          description: invalid qualification id
          schema:
            $ref: '#/definitions/response.ErrorIdResponse'
        "500":
          description: internall db error / Get Only Qualification
          schema:
            $ref: '#/definitions/response.ErrorInternalErrorResponse'
      summary: Show one Qualification without Lanes.
      tags:
      - Qualification
    put:
      consumes:
      - application/json
      description: Put whole new Qualification and overwrite with the id, and update
        lanes below it ,but cannot replace groupid.
      parameters:
      - description: Qualification ID
        in: path
        name: id
        required: true
        type: integer
      - description: Qualification
        in: body
        name: Qualification
        required: true
        schema:
          $ref: '#/definitions/endpoint.PutQualificationByID.QualificationPutData'
      produces:
      - application/json
      responses:
        "200":
          description: success, return updated Qualification
          schema:
            $ref: '#/definitions/database.Qualification'
        "400":
          description: invalid qualification id / invalid lane id / lane is already
            occupied / invalid start or end lane number / Qualification is belong
            to UnassignedGroup, when update Qualification
          schema:
            $ref: '#/definitions/response.ErrorIdResponse'
        "500":
          description: internal db error / Update Lane Qualification Id / Update Qualification
            / Get Only Qualification
          schema:
            $ref: '#/definitions/response.ErrorInternalErrorResponse'
      summary: Update one Qualification.
      tags:
      - Qualification
  /qualification/lanes/{id}:
    get:
      description: Get one Qualification with Lanes by id.
      parameters:
      - description: Qualification ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: success, return Qualification with lanes
          schema:
            allOf:
            - $ref: '#/definitions/database.Qualification'
            - properties:
                lanes:
                  allOf:
                  - $ref: '#/definitions/database.Lane'
                  - properties:
                      players:
                        $ref: '#/definitions/response.Nill'
                    type: object
              type: object
        "400":
          description: invalid qualification id
          schema:
            $ref: '#/definitions/response.ErrorIdResponse'
        "500":
          description: internall db error / Get Qualification With Lanes
          schema:
            $ref: '#/definitions/response.ErrorInternalErrorResponse'
      summary: Show one Qualification with Lanes.
      tags:
      - Qualification
  /qualification/lanes/players/{id}:
    get:
      description: Get one Qualification with Lanes and Players by id
      parameters:
      - description: Qualification ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: success, return Qualification with lanes and players
          schema:
            allOf:
            - $ref: '#/definitions/database.Qualification'
            - properties:
                lanes:
                  allOf:
                  - $ref: '#/definitions/database.Lane'
                  - properties:
                      players:
                        allOf:
                        - $ref: '#/definitions/database.Player'
                        - properties:
                            player_sets:
                              $ref: '#/definitions/response.Nill'
                            rounds:
                              $ref: '#/definitions/response.Nill'
                          type: object
                    type: object
              type: object
        "400":
          description: invalid qualification id
          schema:
            $ref: '#/definitions/response.ErrorIdResponse'
        "500":
          description: internall db error / Get Qualification With Lanes and Players
          schema:
            $ref: '#/definitions/response.ErrorInternalErrorResponse'
      summary: Show one Qualification
      tags:
      - Qualification
  /qualification/lanes/unassigned/{id}:
    get:
      description: Get one Qualification with Unassigned Lanes by id.
      parameters:
      - description: Qualification ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: success, return Qualification with Unassigned lanes
          schema:
            items:
              allOf:
              - $ref: '#/definitions/database.Qualification'
              - properties:
                  lanes:
                    allOf:
                    - $ref: '#/definitions/database.Lane'
                    - properties:
                        players:
                          allOf:
                          - $ref: '#/definitions/database.Player'
                          - properties:
                              player_sets:
                                $ref: '#/definitions/response.Nill'
                              rounds:
                                $ref: '#/definitions/response.Nill'
                            type: object
                      type: object
                type: object
            type: array
        "400":
          description: invalid qualification id
          schema:
            $ref: '#/definitions/response.ErrorIdResponse'
        "500":
          description: internall db error / Get Qualification With Lanes and Players
            / Get Qualification With Unassigned Lanes By ID
          schema:
            $ref: '#/definitions/response.ErrorInternalErrorResponse'
      summary: Show one Qualification with Unassigned Lanes.
      tags:
      - Qualification
  /session:
    delete:
      description: Delete the session.
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/response.Response'
      summary: logout
      tags:
      - Session
    post:
      consumes:
      - application/json
      description: Get a session.
      parameters:
      - description: user_name, password
        in: body
        name: LoginInfo
        required: true
        schema:
          $ref: '#/definitions/endpoint.LoginInfo'
      produces:
      - application/json
      responses:
        "200":
          description: success / already loginned
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: invalid login info
          schema:
            $ref: '#/definitions/response.ErrorReceiveDataFormatResponse'
        "401":
          description: user not found / incorrect password
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: login
      tags:
      - Session
  /swagger/doc.json:
    get:
      description: get Api docs in json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Show Api Docs in json
      tags:
      - docs
  /user:
    post:
      consumes:
      - application/json
      description: |-
        Add a user to db.
        Username cannot be empty or repeated.
        Password cannot be empty.
        Email cannot be empty or repeated.
      parameters:
      - description: nessary information for register
        in: body
        name: AccountInfo
        required: true
        schema:
          $ref: '#/definitions/endpoint.AccountInfo'
      produces:
      - application/json
      responses:
        "200":
          description: a user object
          schema:
            $ref: '#/definitions/database.User'
        "400":
          description: username/email exists | empty username/password/email/institutionID
            | invalid info
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: db error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Register a user.
      tags:
      - User
  /user/{id}:
    get:
      consumes:
      - application/json
      description: Get a user's username, overview, and institution id.
      parameters:
      - description: user's id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: success, return user's info
          schema:
            $ref: '#/definitions/database.User'
        "400":
          description: invalid user id
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: no user found
          schema:
            $ref: '#/definitions/response.Response'
      summary: Get a user's information.
      tags:
      - User
    put:
      consumes:
      - application/json
      description: |-
        Modify username, realname, email, overview, and institution_id.
        Cannot change password.
        Username cannot be empty, repeated.
        Email cannot be empty, repeated.
      parameters:
      - description: user's id
        in: path
        name: id
        required: true
        type: integer
      - description: modified information
        in: body
        name: ModifyInfo
        required: true
        schema:
          $ref: '#/definitions/endpoint.ModifyInfo.ModifyUser'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: empty/invalid user id | invalid modified information
          schema:
            $ref: '#/definitions/response.Response'
        "403":
          description: cannot change other's info
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: internal db error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Modify user's information.
      tags:
      - User
  /user/me:
    get:
      description: Get my uid in the session.
      produces:
      - application/json
      responses:
        "200":
          description: success, return my uid
          schema:
            $ref: '#/definitions/endpoint.GetUserID.ID'
        "401":
          description: require login
          schema:
            $ref: '#/definitions/response.Response'
      summary: Get my uid.
      tags:
      - User
  /user/password/{id}:
    patch:
      consumes:
      - application/json
      description: |-
        Modify user's password.
        Original/New password cannot be empty.
        Original password must be correct.
        New password cannot be the same as original password.
      parameters:
      - description: user's id
        in: path
        name: id
        required: true
        type: integer
      - description: modified password information
        in: body
        name: ModifyInfo
        required: true
        schema:
          $ref: '#/definitions/endpoint.ModifyAccountPasswordInfo'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: empty/invalid user id | invalid modified information
          schema:
            $ref: '#/definitions/response.Response'
        "403":
          description: cannot change other's password | wrong original password |
            original & modified passwords are the same
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: internal db error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Modify user's password.
      tags:
      - User
swagger: "2.0"
tags:
- name: Session
- name: User
- name: Institution
- name: Competition
- name: Participant
- name: GroupInfo
- name: Qualification
- name: Lane
- name: Player
- name: Elimination
- name: PlayerSet
- name: MatchResult
- name: MatchEnd
- name: MatchScore
- name: Medal
- name: docs
