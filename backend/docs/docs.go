// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "NYCUArchery",
            "url": "https://github.com/NYCUarchery"
        },
        "license": {
            "name": "no license yet"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/competition": {
            "get": {
                "description": "Get the information of all competitions.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Competition"
                ],
                "summary": "Get the information of all competitions.",
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "allOf": [
                                    {
                                        "$ref": "#/definitions/database.Competition"
                                    },
                                    {
                                        "type": "object",
                                        "properties": {
                                            "groups": {
                                                "$ref": "#/definitions/response.Nill"
                                            },
                                            "participants": {
                                                "$ref": "#/definitions/response.Nill"
                                            }
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    "500": {
                        "description": "internal db error for getting all competitions",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorInternalErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Post one new Competition data with new id.\nCreate UnassignedGroup, create Lanes and UnassignedLane which link to UnassignedGroup.\nAdd host as admin of competition, and return the new Competition data.\nZeroTime 0001-01-01T00:00:00+00:01",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Competition"
                ],
                "summary": "Create one Competition and related data.",
                "parameters": [
                    {
                        "description": "Competition",
                        "name": "Competition",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/endpoint.PostCompetition.CompetitionPostData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success, return new competition data",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/database.Competition"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "groups": {
                                            "$ref": "#/definitions/response.Nill"
                                        },
                                        "participants": {
                                            "$ref": "#/definitions/response.Nill"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "roundsNum must \u003e 0 / When creating Competition, startTime must \u003c= endTime",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorReceiveDataFormatResponse"
                        }
                    },
                    "500": {
                        "description": "internal db error / Post GroupInfo / Update Competition UnassignedLaneId / Update Competition UnassignedGroupId",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorInternalErrorResponse"
                        }
                    }
                }
            }
        },
        "/competition/current-phase/minus/{id}": {
            "put": {
                "description": "Update one Competition currentPhase -- by id.",
                "tags": [
                    "Competition"
                ],
                "summary": "Update one Competition currentPhase -- by id.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Competition ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "invalid competition id parameter",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorIdResponse"
                        }
                    },
                    "500": {
                        "description": "Update Competition CurrentPhase Minus",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorInternalErrorResponse"
                        }
                    }
                }
            }
        },
        "/competition/current-phase/plus/{id}": {
            "put": {
                "description": "Update one Competition currentPhase ++ by id.",
                "tags": [
                    "Competition"
                ],
                "summary": "Update one Competition currentPhase ++ by id.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Competition ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "invalid competition id parameter",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorIdResponse"
                        }
                    },
                    "500": {
                        "description": "Update Competition CurrentPhase Plus",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorInternalErrorResponse"
                        }
                    }
                }
            }
        },
        "/competition/current/{head}/{tail}": {
            "get": {
                "description": "Get current Competitions, head and tail are the range of most recent competitions.\nFor example, head = 0, tail = 10, then return the most recent 10 competitions.\nhead \u003e= 0, tail \u003e= 0, head \u003c= tail",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Competition"
                ],
                "summary": "Show current Competitions",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "head",
                        "name": "head",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "tail",
                        "name": "tail",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success, return most recent competitions",
                        "schema": {
                            "type": "array",
                            "items": {
                                "allOf": [
                                    {
                                        "$ref": "#/definitions/database.Competition"
                                    },
                                    {
                                        "type": "object",
                                        "properties": {
                                            "groups": {
                                                "$ref": "#/definitions/response.Nill"
                                            },
                                            "participants": {
                                                "$ref": "#/definitions/response.Nill"
                                            }
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    "400": {
                        "description": "head and tail must \u003e= 0 / head must \u003c= tail / invalid head parameter / invalid tail parameter",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorReceiveDataFormatResponse"
                        }
                    },
                    "500": {
                        "description": "internal db error / Get Current Competitions",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorInternalErrorResponse"
                        }
                    }
                }
            }
        },
        "/competition/elimination-isactive/{id}": {
            "put": {
                "description": "Update one Competition Elimination Active to be true by id.\nCannot change to false, only can change to true.",
                "tags": [
                    "Competition"
                ],
                "summary": "Update one Competition Elimination Active to be true by id.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Competition ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "204": {
                        "description": "success, but no change",
                        "schema": {
                            "$ref": "#/definitions/response.Nill"
                        }
                    },
                    "400": {
                        "description": "invalid competition id parameter",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorIdResponse"
                        }
                    },
                    "500": {
                        "description": "Update Competition Elimination Active",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorInternalErrorResponse"
                        }
                    }
                }
            }
        },
        "/competition/groups/eliminations/{id}": {
            "get": {
                "description": "Get one Competition by id with related Groups which have related one Qualification id and many Elimination ids.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Competition"
                ],
                "summary": "Show Groups and Eliminations of one Competition.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Competition ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success, return competition with groups and eliminations",
                        "schema": {
                            "$ref": "#/definitions/endpoint.CompetitionWGroupsQuaEliData"
                        }
                    },
                    "400": {
                        "description": "invalid comepetition id parameter",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorIdResponse"
                        }
                    },
                    "500": {
                        "description": "internal db error / Get Competition Group Ids when get Competition with Groups Qualification Elimination / Get Elimination By Group Id when get Competition with Groups Qualification Elimination",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorInternalErrorResponse"
                        }
                    }
                }
            }
        },
        "/competition/groups/players/{id}": {
            "get": {
                "description": "Get one Competition by id with GroupInfos and Players.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Competition"
                ],
                "summary": "Show one Competition with GroupInfos and Players.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Competition ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success, return competition with groups and players",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/database.Competition"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "groups": {
                                            "type": "array",
                                            "items": {
                                                "allOf": [
                                                    {
                                                        "$ref": "#/definitions/database.Group"
                                                    },
                                                    {
                                                        "type": "object",
                                                        "properties": {
                                                            "players": {
                                                                "type": "array",
                                                                "items": {
                                                                    "allOf": [
                                                                        {
                                                                            "$ref": "#/definitions/database.Player"
                                                                        },
                                                                        {
                                                                            "type": "object",
                                                                            "properties": {
                                                                                "player_sets": {
                                                                                    "$ref": "#/definitions/response.Nill"
                                                                                },
                                                                                "rounds": {
                                                                                    "$ref": "#/definitions/response.Nill"
                                                                                }
                                                                            }
                                                                        }
                                                                    ]
                                                                }
                                                            }
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        "participants": {
                                            "$ref": "#/definitions/response.Nill"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "invalid comepetition id parameter",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorIdResponse"
                        }
                    },
                    "500": {
                        "description": "internal db error for getting competition",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorInternalErrorResponse"
                        }
                    }
                }
            }
        },
        "/competition/groups/{id}": {
            "get": {
                "description": "Get one Competition by id with GroupInfos",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Competition"
                ],
                "summary": "Show one Competition with GroupInfos",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Competition ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success, return competition without participants",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/database.Competition"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "groups": {
                                            "type": "array",
                                            "items": {
                                                "allOf": [
                                                    {
                                                        "$ref": "#/definitions/database.Group"
                                                    },
                                                    {
                                                        "type": "object",
                                                        "properties": {
                                                            "players": {
                                                                "$ref": "#/definitions/response.Nill"
                                                            }
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        "participants": {
                                            "$ref": "#/definitions/response.Nill"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "invalid competition id parameter",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorIdResponse"
                        }
                    },
                    "500": {
                        "description": "internal db error for getting competition",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorInternalErrorResponse"
                        }
                    }
                }
            }
        },
        "/competition/mixed-elimination-isactive/{id}": {
            "put": {
                "description": "Update one Competition Mixed Elimination Active to be true by id.\nCannot change to false, only can change to true.\ncreate all mixed elimination for groups",
                "tags": [
                    "Competition"
                ],
                "summary": "Update one Competition Mixed Elimination Active to be true and create mixed elimination.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Competition ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "204": {
                        "description": "success, but no change",
                        "schema": {
                            "$ref": "#/definitions/response.Nill"
                        }
                    },
                    "400": {
                        "description": "invalid competition id parameter",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorIdResponse"
                        }
                    },
                    "500": {
                        "description": "Update Competition Mixed Elimination Active / Get Competition Group Ids / Post Elimination By Id",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorInternalErrorResponse"
                        }
                    }
                }
            }
        },
        "/competition/participants/{id}": {
            "get": {
                "description": "Get one Competition by id with Participants.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Competition"
                ],
                "summary": "Show one Competition with Participants.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Competition ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success, return competition without groups",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/database.Competition"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "groups": {
                                            "$ref": "#/definitions/response.Nill"
                                        },
                                        "participants": {
                                            "$ref": "#/definitions/database.Participant"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "invalid comepetition id parameter",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorIdResponse"
                        }
                    },
                    "500": {
                        "description": "internal db error for getting competition",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorInternalErrorResponse"
                        }
                    }
                }
            }
        },
        "/competition/qualification-current-end/minus/{id}": {
            "put": {
                "description": "Update one Competition Qualification currentEnd -- by id.",
                "tags": [
                    "Competition"
                ],
                "summary": "Update one Competition Qualification currentEnd -- by id.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Competition ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "invalid competition id parameter",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorIdResponse"
                        }
                    },
                    "500": {
                        "description": "Update Competition Qualification CurrentEnd Minus",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorInternalErrorResponse"
                        }
                    }
                }
            }
        },
        "/competition/qualification-current-end/plus/{id}": {
            "put": {
                "description": "Update one Competition Qualification currentEnd ++ by id.",
                "tags": [
                    "Competition"
                ],
                "summary": "Update one Competition Qualification currentEnd ++ by id.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Competition ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "invalid competition id parameter",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorIdResponse"
                        }
                    },
                    "500": {
                        "description": "Update Competition Qualification CurrentEnd Plus",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorInternalErrorResponse"
                        }
                    }
                }
            }
        },
        "/competition/qualification-isactive/{id}": {
            "put": {
                "description": "Update one Competition Qualification Active to be true by id.\nCannot change to false, only can change to true.",
                "tags": [
                    "Competition"
                ],
                "summary": "Update one Competition Qualification Active to be true by id.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Competition ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "204": {
                        "description": "success, but no change",
                        "schema": {
                            "$ref": "#/definitions/response.Nill"
                        }
                    },
                    "400": {
                        "description": "invalid competition id parameter",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorIdResponse"
                        }
                    },
                    "500": {
                        "description": "Update Competition Qualification Active",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorInternalErrorResponse"
                        }
                    }
                }
            }
        },
        "/competition/refresh/groups/players/playertotalscore/{id}": {
            "put": {
                "description": "Refresh competition player total score by competition id.",
                "tags": [
                    "Competition"
                ],
                "summary": "Refresh competition player total score by competition id.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Competition ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "invalid competition id parameter",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorIdResponse"
                        }
                    },
                    "500": {
                        "description": "Get Competition with Groups Players Scores / Update Round Total Score / Update Player Total Score",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorInternalErrorResponse"
                        }
                    }
                }
            }
        },
        "/competition/refresh/groups/players/rank/{id}": {
            "put": {
                "description": "Refresh all player ranking of different groups in one Competition.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Competition"
                ],
                "summary": "Refresh one Competition Ranking.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Competition ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update Competition Ranking Success",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "invalid competition id parameter",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorIdResponse"
                        }
                    },
                    "500": {
                        "description": "internal db error / Get Competition GroupIds when update ranking / Get player ids when update ranking / Update player rank when update ranking by competition id",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorInternalErrorResponse"
                        }
                    }
                }
            }
        },
        "/competition/team-elimination-isactive/{id}": {
            "put": {
                "description": "Update one Competition Team Elimination Active to be true by id.\nCannot change to false, only can change to true.\nCreate all team elimination for groups.",
                "tags": [
                    "Competition"
                ],
                "summary": "Update one Competition Team Elimination Active to be true and create team elimination.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Competition ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "204": {
                        "description": "success, but no change",
                        "schema": {
                            "$ref": "#/definitions/response.Nill"
                        }
                    },
                    "400": {
                        "description": "invalid competition id parameter",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorIdResponse"
                        }
                    },
                    "500": {
                        "description": "Update Competition Team Elimination Active / Get Competition Group Ids / Post Elimination By Id",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorInternalErrorResponse"
                        }
                    }
                }
            }
        },
        "/competition/user/{userid}/{head}/{tail}": {
            "get": {
                "description": "Get recent Competitions by User id, head and tail are the range of most recent competitions.\nFor example, head = 0, tail = 10, then return the most recent 10 competitions.\nhead \u003e= 0, tail \u003e= 0, head \u003c= tail",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Competition"
                ],
                "summary": "Show recent Competitions dealing with User.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "userid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "head",
                        "name": "head",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "tail",
                        "name": "tail",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success, return most recent competitions dealing with User",
                        "schema": {
                            "type": "array",
                            "items": {
                                "allOf": [
                                    {
                                        "$ref": "#/definitions/database.Competition"
                                    },
                                    {
                                        "type": "object",
                                        "properties": {
                                            "groups": {
                                                "$ref": "#/definitions/response.Nill"
                                            },
                                            "participants": {
                                                "$ref": "#/definitions/response.Nill"
                                            }
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    "400": {
                        "description": "head and tail must \u003e= 0 / head must \u003c= tail / invalid head parameter / invalid tail parameter / invalid userid parameter",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorReceiveDataFormatResponse"
                        }
                    },
                    "500": {
                        "description": "internal db error / Get User / Get Competitions Of User",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorInternalErrorResponse"
                        }
                    }
                }
            }
        },
        "/competition/whole/{id}": {
            "put": {
                "description": "Put whole new Competition and overwrite by the id.\nAllow to change title, subtitle, startTime, endTime, script, currentPhase, qualificationCurrentEnd.\nCannot replace RoundNum, GroupNum, LaneNum, unassignedLaneId, unassignedGroupId, hostId, currentPhase, qualificationCurrentEnd.\nzeroTime 0001-01-01T00:00:00+00:01",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Competition"
                ],
                "summary": "update one Competition",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Competition ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Competition",
                        "name": "Competition",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/endpoint.PutCompetition.CompetitionPutData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success, return modified competition data",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/database.Competition"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "groups": {
                                            "$ref": "#/definitions/response.Nill"
                                        },
                                        "participants": {
                                            "$ref": "#/definitions/response.Nill"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "204": {
                        "description": "success, but no change",
                        "schema": {
                            "$ref": "#/definitions/response.Nill"
                        }
                    },
                    "400": {
                        "description": "invalid competition id parameter / When creating Competition, startTime must \u003c= endTime",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorReceiveDataResponse"
                        }
                    },
                    "500": {
                        "description": "internal db error / Get Competition / Update Competition",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorInternalErrorResponse"
                        }
                    }
                }
            }
        },
        "/competition/{id}": {
            "get": {
                "description": "Get one Competition by id without groups and participants.\nzeroTime 0001-01-01T00:00:00+00:01",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Competition"
                ],
                "summary": "Show one Competition without groups and participants.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Competition ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success, but groups and participants are empty",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/database.Competition"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "groups": {
                                            "$ref": "#/definitions/response.Nill"
                                        },
                                        "participants": {
                                            "$ref": "#/definitions/response.Nill"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "invalid competition id parameter",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorIdResponse"
                        }
                    },
                    "500": {
                        "description": "internal db error for getting competition",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorInternalErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete one Competition by id.\nDelete all related groups, lanes, players, participants.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Competition"
                ],
                "summary": "Delete one Competition.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Competition ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "delete success",
                        "schema": {
                            "$ref": "#/definitions/response.DeleteSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "invalid competition id parameter",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorIdResponse"
                        }
                    },
                    "500": {
                        "description": "internal db error / Delete Competition with Groups / Delete GroupInfo By Id Through Competition / Delete Player Through Competition / Delete Participaint / Delete Lane By Competition Id",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorInternalErrorResponse"
                        }
                    }
                }
            }
        },
        "/elimination": {
            "post": {
                "description": "Post one new Elimination data, and three medals",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Elimination"
                ],
                "summary": "Create one Elimination",
                "parameters": [
                    {
                        "description": "Elimination",
                        "name": "Elimination",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/endpoint.PostElimination.PostEliminationData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success, return one Elimination with new id",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/database.Elimination"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "medals": {
                                            "$ref": "#/definitions/response.Nill"
                                        },
                                        "player_sets": {
                                            "$ref": "#/definitions/response.Nill"
                                        },
                                        "stages": {
                                            "$ref": "#/definitions/response.Nill"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "invalid group ID, maybe not exist",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorIdResponse"
                        }
                    },
                    "500": {
                        "description": "internal db error for Create Elimination",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorInternalErrorResponse"
                        }
                    }
                }
            }
        },
        "/elimination/currentend/minus/{id}": {
            "put": {
                "description": "Update one Elimination current end minus one by id",
                "tags": [
                    "Elimination"
                ],
                "summary": "Update one Elimination current end minus one",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Elimination ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success, return one Elimination with new current end",
                        "schema": {
                            "$ref": "#/definitions/response.Nill"
                        }
                    },
                    "400": {
                        "description": "invalid Elimination ID, maybe not exist",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorIdResponse"
                        }
                    },
                    "500": {
                        "description": "internal db error for Update Elimination CurrentStage",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorInternalErrorResponse"
                        }
                    }
                }
            }
        },
        "/elimination/currentend/plus/{id}": {
            "put": {
                "description": "Update one Elimination current end plus one by id",
                "tags": [
                    "Elimination"
                ],
                "summary": "Update one Elimination current end plus one",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Elimination ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success, return one Elimination with new current end",
                        "schema": {
                            "$ref": "#/definitions/response.Nill"
                        }
                    },
                    "400": {
                        "description": "invalid Elimination ID, maybe not exist",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorIdResponse"
                        }
                    },
                    "500": {
                        "description": "internal db error for Update Elimination CurrentStage",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorInternalErrorResponse"
                        }
                    }
                }
            }
        },
        "/elimination/currentstage/minus/{id}": {
            "put": {
                "description": "Update one Elimination current stage minus one by id",
                "tags": [
                    "Elimination"
                ],
                "summary": "Update one Elimination current stage minus one",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Elimination ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success, return one Elimination with new current stage",
                        "schema": {
                            "$ref": "#/definitions/response.Nill"
                        }
                    },
                    "400": {
                        "description": "invalid Elimination ID, maybe not exist",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorIdResponse"
                        }
                    },
                    "500": {
                        "description": "internal db error for Update Elimination CurrentStage",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorInternalErrorResponse"
                        }
                    }
                }
            }
        },
        "/elimination/currentstage/plus/{id}": {
            "put": {
                "description": "Update one Elimination current stage plus one by id",
                "tags": [
                    "Elimination"
                ],
                "summary": "Update one Elimination current stage plus one",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Elimination ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success, return one Elimination with new current stage",
                        "schema": {
                            "$ref": "#/definitions/response.Nill"
                        }
                    },
                    "400": {
                        "description": "invalid Elimination ID, maybe not exist",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorIdResponse"
                        }
                    },
                    "500": {
                        "description": "internal db error for Update Elimination CurrentStage",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorInternalErrorResponse"
                        }
                    }
                }
            }
        },
        "/elimination/match": {
            "post": {
                "description": "Post one new Match data with 2 matchResults\nEach matchResults with 4 or 5 matchEnds with different teamSize\nEach matchEnds with 3, 4, 6 matchScores with different teamSize\ninput PlayerSetIds should have 2 playerSets in the same elimination\ninput LaneNumbers should have 2 laneNumbers for each playerset",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Elimination"
                ],
                "summary": "Create one Match",
                "parameters": [
                    {
                        "description": "Match",
                        "name": "Match",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/endpoint.PostMatch.MatchData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success, return one Match with new id",
                        "schema": {
                            "$ref": "#/definitions/database.Match"
                        }
                    },
                    "400": {
                        "description": "invalid stage ID, maybe not exist, or player set id should be 2, lane numbers should be 2",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorIdResponse"
                        }
                    },
                    "500": {
                        "description": "internal db error for Create Match, MatchResult, MatchEnd, MatchScore, or get Stage",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorInternalErrorResponse"
                        }
                    }
                }
            }
        },
        "/elimination/match/scores/{matchid}": {
            "get": {
                "description": "Get one Match with matchResults, matchEnds, scores, playerSets, players by id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Elimination"
                ],
                "summary": "Show one Match with all related data",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Match ID",
                        "name": "matchid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success, return one Match with all related data",
                        "schema": {
                            "$ref": "#/definitions/database.Match"
                        }
                    },
                    "400": {
                        "description": "invalid Match ID, maybe not exist",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorIdResponse"
                        }
                    },
                    "500": {
                        "description": "internal db error for Get Match",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorInternalErrorResponse"
                        }
                    }
                }
            }
        },
        "/elimination/playersets/{id}": {
            "get": {
                "description": "Get one Elimination with player sets by id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Elimination"
                ],
                "summary": "Show one Elimination with player sets",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Elimination ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success, return one Elimination with player sets",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/database.Elimination"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "medals": {
                                            "$ref": "#/definitions/response.Nill"
                                        },
                                        "player_sets": {
                                            "allOf": [
                                                {
                                                    "$ref": "#/definitions/database.PlayerSet"
                                                },
                                                {
                                                    "type": "object",
                                                    "properties": {
                                                        "players": {
                                                            "$ref": "#/definitions/response.Nill"
                                                        }
                                                    }
                                                }
                                            ]
                                        },
                                        "stages": {
                                            "$ref": "#/definitions/response.Nill"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "invalid Elimination ID, maybe not exist",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorIdResponse"
                        }
                    },
                    "500": {
                        "description": "internal db error for Get Elimination",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorInternalErrorResponse"
                        }
                    }
                }
            }
        },
        "/elimination/scores/{id}": {
            "get": {
                "description": "Get one Elimination with stages, matches, matchResults, matchEnds, scores by id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Elimination"
                ],
                "summary": "Show one Elimination with all scores",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Elimination ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success, return one Elimination with all scores",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/database.Elimination"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "medals": {
                                            "$ref": "#/definitions/response.Nill"
                                        },
                                        "player_sets": {
                                            "$ref": "#/definitions/response.Nill"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "invalid Elimination ID, maybe not exist",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorIdResponse"
                        }
                    },
                    "500": {
                        "description": "internal db error for Get Elimination",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorInternalErrorResponse"
                        }
                    }
                }
            }
        },
        "/elimination/stage": {
            "post": {
                "description": "Post one new Stage data with new id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Elimination"
                ],
                "summary": "Create one Stage",
                "parameters": [
                    {
                        "description": "Stage",
                        "name": "Stage",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/endpoint.PostStage.PostStageData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success, return one Stage with new id",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/database.Stage"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "matchs": {
                                            "$ref": "#/definitions/response.Nill"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "invalid elimination ID, maybe not exist",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorIdResponse"
                        }
                    },
                    "500": {
                        "description": "internal db error for Create Stage",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorInternalErrorResponse"
                        }
                    }
                }
            }
        },
        "/elimination/stages/matches/{id}": {
            "get": {
                "description": "Get one Elimination with stages, matches by id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Elimination"
                ],
                "summary": "Show one Elimination with stages, matches",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Elimination ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success, return one Elimination with stages, matches",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/database.Elimination"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "medals": {
                                            "$ref": "#/definitions/response.Nill"
                                        },
                                        "player_sets": {
                                            "$ref": "#/definitions/response.Nill"
                                        },
                                        "stages": {
                                            "allOf": [
                                                {
                                                    "$ref": "#/definitions/database.Stage"
                                                },
                                                {
                                                    "type": "object",
                                                    "properties": {
                                                        "matches": {
                                                            "allOf": [
                                                                {
                                                                    "$ref": "#/definitions/database.Match"
                                                                },
                                                                {
                                                                    "type": "object",
                                                                    "properties": {
                                                                        "MatchResult": {
                                                                            "$ref": "#/definitions/response.Nill"
                                                                        }
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "invalid Elimination ID, maybe not exist",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorIdResponse"
                        }
                    },
                    "500": {
                        "description": "internal db error for Get Elimination",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorInternalErrorResponse"
                        }
                    }
                }
            }
        },
        "/elimination/stages/scores/medals/{id}": {
            "get": {
                "description": "Get one Elimination with stages, matches, matchResults, matchEnds, scores, playerSets, players, medals by id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Elimination"
                ],
                "summary": "Show one Elimination with all related data",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Elimination ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success, return one Elimination with all related data",
                        "schema": {
                            "$ref": "#/definitions/database.Elimination"
                        }
                    },
                    "400": {
                        "description": "invalid Elimination ID, maybe not exist",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorIdResponse"
                        }
                    },
                    "500": {
                        "description": "internal db error for Get Elimination",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorInternalErrorResponse"
                        }
                    }
                }
            }
        },
        "/elimination/{id}": {
            "get": {
                "description": "Get only one Elimination by id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Elimination"
                ],
                "summary": "Show only one Elimination",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Elimination ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success, return one Elimination without related data",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/database.Elimination"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "medals": {
                                            "$ref": "#/definitions/response.Nill"
                                        },
                                        "player_sets": {
                                            "$ref": "#/definitions/response.Nill"
                                        },
                                        "stages": {
                                            "$ref": "#/definitions/response.Nill"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "invalid Elimination ID, maybe not exist",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorIdResponse"
                        }
                    },
                    "500": {
                        "description": "internal db error for Get Elimination",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorInternalErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete one Elimination by id, and related stages and matches",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Elimination"
                ],
                "summary": "Delete one Elimination, and related stages and matches",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Elimination ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success, return delete success message",
                        "schema": {
                            "$ref": "#/definitions/response.DeleteSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "invalid Elimination ID, maybe not exist, or already deleted",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorIdResponse"
                        }
                    },
                    "500": {
                        "description": "internal db error for Delete Elimination",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorInternalErrorResponse"
                        }
                    }
                }
            }
        },
        "/groupinfo": {
            "post": {
                "description": "Post one new GroupInfo data with new id\nCreate qualification with same id\nAuto write GroupIndex\nAuto create elimination",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "GroupInfo"
                ],
                "summary": "Create one GroupInfo",
                "parameters": [
                    {
                        "description": "LaneData",
                        "name": "GroupInfo",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/endpoint.PostGroupInfo.GroupData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success, return new GroupInfo data",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/database.Group"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "players": {
                                            "$ref": "#/definitions/response.Nill"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "invalid Competition ID, may not exist",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorIdResponse"
                        }
                    },
                    "500": {
                        "description": "database error for Create GroupInfo, Create Qualification, Create Elimination, get Competition",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorInternalErrorResponse"
                        }
                    }
                }
            }
        },
        "/groupinfo/ordering": {
            "put": {
                "description": "Put competition_id and group_ids to update GroupInfos Indices under the same Competition\nGroupIds cannot include UnassignedGroupId\nGroupIds length must be equal to Competition group_num",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "GroupInfo"
                ],
                "summary": "update all GroupInfos Indices under the same Competition",
                "parameters": [
                    {
                        "description": "GroupInfo IDs for reorder",
                        "name": "groupIdsForReorder",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/endpoint.groupIdsForReorder"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success, return new updated Competition data",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/database.Competition"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "groups": {
                                            "allOf": [
                                                {
                                                    "$ref": "#/definitions/database.Group"
                                                },
                                                {
                                                    "type": "object",
                                                    "properties": {
                                                        "players": {
                                                            "$ref": "#/definitions/response.Nill"
                                                        }
                                                    }
                                                }
                                            ]
                                        },
                                        "participants": {
                                            "$ref": "#/definitions/response.Nill"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "invalid Competition ID, group id, may not exist",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorIdResponse"
                        }
                    },
                    "500": {
                        "description": "database error for Update GroupInfo Index, Get Competition",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorInternalErrorResponse"
                        }
                    }
                }
            }
        },
        "/groupinfo/players/{id}": {
            "get": {
                "description": "Get one GroupInfo with players by id, usually ordered by rank",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "GroupInfo"
                ],
                "summary": "Show one GroupInfo with players",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "GroupInfo ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success, get GroupInfo with players by id",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/database.Group"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "players": {
                                            "allOf": [
                                                {
                                                    "$ref": "#/definitions/database.Player"
                                                },
                                                {
                                                    "type": "object",
                                                    "properties": {
                                                        "player_sets": {
                                                            "$ref": "#/definitions/response.Nill"
                                                        },
                                                        "rounds": {
                                                            "$ref": "#/definitions/response.Nill"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "invalid GroupInfo ID, may not exist",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorIdResponse"
                        }
                    },
                    "500": {
                        "description": "database error for Get GroupInfo with players",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorInternalErrorResponse"
                        }
                    }
                }
            }
        },
        "/groupinfo/whole/{id}": {
            "put": {
                "description": "Put whole new GroupInfo and overwrite with the id\nCannot overwrite CompetitionId\nCannot overwrite UnassignedGroup",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "GroupInfo"
                ],
                "summary": "update one GroupInfo",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "GroupInfo ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "GroupInfo",
                        "name": "GroupInfo",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/endpoint.PutGroupInfo.GroupData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success, return new updated GroupInfo data",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/database.Group"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "players": {
                                            "$ref": "#/definitions/response.Nill"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "invalid GroupInfo ID, may not exist, cannot update UnassignedGroup",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorIdResponse"
                        }
                    },
                    "500": {
                        "description": "database error for Update GroupInfo, Get GroupInfo",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorInternalErrorResponse"
                        }
                    }
                }
            }
        },
        "/groupinfo/{id}": {
            "get": {
                "description": "Get only one GroupInfo by id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "GroupInfo"
                ],
                "summary": "Show only one GroupInfo",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "GroupInfo ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success, get GroupInfo by id without related data",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/database.Group"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "players": {
                                            "$ref": "#/definitions/response.Nill"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "invalid GroupInfo ID, may not exist",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorIdResponse"
                        }
                    },
                    "500": {
                        "description": "database error for Get GroupInfo",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorInternalErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete one GroupInfo by id, delete qualification,\nChange player to UnassignedGroup and UnassignedLane\nUpdate competition group_num\nCannot delete UnassignedGroup",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "GroupInfo"
                ],
                "summary": "delete one GroupInfo",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "GroupInfo ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success, delete GroupInfo by id",
                        "schema": {
                            "$ref": "#/definitions/response.DeleteSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "invalid GroupInfo ID, may not exist, or already deleted, or cannot delete UnassignedGroup",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorIdResponse"
                        }
                    },
                    "500": {
                        "description": "database error for Delete GroupInfo, Get PlayerIds, Update PlayerGroupId, Update PlayerLaneId, Delete Qualification, Delete GroupInfo, MinusOneCompetitionGroupNum",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorInternalErrorResponse"
                        }
                    }
                }
            }
        },
        "/institution": {
            "get": {
                "description": "get all institution info from db",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Institution"
                ],
                "summary": "get all institution info",
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/database.Institution"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "db error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "post": {
                "description": "add an institution to db\ncannot repeat institution name",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Institution"
                ],
                "summary": "create an institution",
                "parameters": [
                    {
                        "description": "institution's information",
                        "name": "NewInstitutionInfo",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/endpoint.NewInstitutionInfo"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "empty institution name || institution already exists",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "db error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/institution/{id}": {
            "get": {
                "description": "get institution info from db by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Institution"
                ],
                "summary": "get institution info by id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "institution's id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/database.Institution"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "invalid id",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "404": {
                        "description": "no institution found",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "delete": {
                "description": "delete an institution from db",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Institution"
                ],
                "summary": "delete an institution",
                "parameters": [
                    {
                        "type": "string",
                        "description": "institution's id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "invalid id",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "404": {
                        "description": "institution not found",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/lane/all/{id}": {
            "get": {
                "description": "Get all Lane by competition id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Lane"
                ],
                "summary": "Show all Lane of a competition",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "competition ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "succsess",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/database.Lane"
                            }
                        }
                    },
                    "400": {
                        "description": "invalid competition id",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorIdResponse"
                        }
                    },
                    "500": {
                        "description": "internal db error / Get All Lane By Competition ID",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorInternalErrorResponse"
                        }
                    }
                }
            }
        },
        "/lane/scores/{id}": {
            "get": {
                "description": "Get one Lane with players, rounds, roundends, roundscores by id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Lane"
                ],
                "summary": "Show one Lane with players, rounds, roundends, roundscores",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Lane ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/database.Lane"
                        }
                    },
                    "400": {
                        "description": "invalid lane id",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorIdResponse"
                        }
                    },
                    "500": {
                        "description": "internal db error / Get Lane With Scores By Id",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorInternalErrorResponse"
                        }
                    }
                }
            }
        },
        "/lane/{id}": {
            "get": {
                "description": "Get one Lane by id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Lane"
                ],
                "summary": "Show one Lane",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Lane ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/database.Lane"
                        }
                    },
                    "400": {
                        "description": "invalid lane id",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorIdResponse"
                        }
                    },
                    "500": {
                        "description": "internal db error / Get Lane By Id",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorInternalErrorResponse"
                        }
                    }
                }
            }
        },
        "/matchresult/iswinner/{id}": {
            "put": {
                "description": "Update one MatchResult isWinner by id",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "MatchResult"
                ],
                "summary": "Update one MatchResult isWinner",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "MatchResult ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "MatchResult",
                        "name": "MatchResult",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/endpoint.PutMatchResultIsWinnerById.matchResultIsWinnerData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success, return nil",
                        "schema": {
                            "$ref": "#/definitions/response.Nill"
                        }
                    },
                    "400": {
                        "description": "invalid match result ID, maybe not exist",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorIdResponse"
                        }
                    },
                    "500": {
                        "description": "internal db failed for updating isWinner",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorInternalErrorResponse"
                        }
                    }
                }
            }
        },
        "/matchresult/lanenumber/{id}": {
            "put": {
                "description": "Update one MatchResult laneNumber by id",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "MatchResult"
                ],
                "summary": "Update one MatchResult laneNumber",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "MatchResult ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "MatchResult",
                        "name": "MatchResult",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/endpoint.PutMatchResultLaneNumberById.matchResultLaneNumberData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success, return nil",
                        "schema": {
                            "$ref": "#/definitions/response.Nill"
                        }
                    },
                    "400": {
                        "description": "invalid match result ID, maybe not exist",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorIdResponse"
                        }
                    },
                    "500": {
                        "description": "internal db failed for updating laneNumber",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorInternalErrorResponse"
                        }
                    }
                }
            }
        },
        "/matchresult/matchend": {
            "post": {
                "description": "Post one new MatchEnd data,\nAuto write totalScores IsConfirmed, and auto create matchScores by teamSize\nteamSize: 1, 2, 3",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "MatchEnd"
                ],
                "summary": "Create one MatchEnd",
                "parameters": [
                    {
                        "description": "matchEndData",
                        "name": "matchEndData",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/endpoint.PostMatchEnd.matchEndData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success, return nil",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "invalid match result ID, maybe not exist",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorReceiveDataResponse"
                        }
                    },
                    "500": {
                        "description": "internal db failed for creating matchEnd, creating matchScores",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorInternalErrorResponse"
                        }
                    }
                }
            }
        },
        "/matchresult/matchend/isconfirmed/{id}": {
            "put": {
                "description": "Update one MatchEnd isConfirmed by id",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "MatchEnd"
                ],
                "summary": "Update one MatchEnd isConfirmed",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "MatchEnd ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "MatchEnd",
                        "name": "MatchEnd",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/endpoint.PutMatchEndsIsConfirmedById.matchEndIsConfirmedData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success, return nil",
                        "schema": {
                            "$ref": "#/definitions/response.Nill"
                        }
                    },
                    "400": {
                        "description": "invalid match end ID, maybe not exist",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorIdResponse"
                        }
                    },
                    "500": {
                        "description": "internal db failed for updating isConfirmed",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorInternalErrorResponse"
                        }
                    }
                }
            }
        },
        "/matchresult/matchend/scores/{id}": {
            "put": {
                "description": "Update one MatchEnd totalScores by id and all related MatchScores by MatchScore ids\nMatchScore ids and scores must be the same length",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "MatchEnd"
                ],
                "summary": "Update one MatchEnd scores",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "MatchEnd ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "matchEndScoresData",
                        "name": "matchEndScoresData",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/endpoint.PutMatchEndsScoresById.matchEndScoresData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success, return nil",
                        "schema": {
                            "$ref": "#/definitions/response.Nill"
                        }
                    },
                    "400": {
                        "description": "invalid match end ID, maybe not exist, or matchScore ids not exist, or matchScore ids and scores length not match",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorIdResponse"
                        }
                    },
                    "500": {
                        "description": "internal db failed for updating scores",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorInternalErrorResponse"
                        }
                    }
                }
            }
        },
        "/matchresult/matchend/totalscore/{id}": {
            "put": {
                "description": "Update one MatchEnd totalScores by id",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "MatchEnd"
                ],
                "summary": "Update one MatchEnd totalScores",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "MatchEnd ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "MatchEnd",
                        "name": "MatchEnd",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/endpoint.PutMatchEndsTotalScoresById.matchEndTotalScoresData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success, return nil",
                        "schema": {
                            "$ref": "#/definitions/response.Nill"
                        }
                    },
                    "400": {
                        "description": "invalid match end ID, maybe not exist",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorIdResponse"
                        }
                    },
                    "500": {
                        "description": "internal db failed for updating totalScores",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorInternalErrorResponse"
                        }
                    }
                }
            }
        },
        "/matchresult/matchscore/score/{id}": {
            "put": {
                "description": "Update one MatchScore score by id\nAlso update related MatchEnd totalScores",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "MatchScore"
                ],
                "summary": "Update one MatchScore score",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "MatchScore ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "MatchScore",
                        "name": "MatchScore",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/endpoint.PutMatchScoreScoreById.matchScoreData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success, return nil",
                        "schema": {
                            "$ref": "#/definitions/response.Nill"
                        }
                    },
                    "400": {
                        "description": "invalid match score ID, maybe not exist",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorIdResponse"
                        }
                    },
                    "500": {
                        "description": "internal db failed for updating score, get matchEnd by id, get matchScore, update matchEnd totalScores",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorInternalErrorResponse"
                        }
                    }
                }
            }
        },
        "/matchresult/scores/{id}": {
            "get": {
                "description": "Get one MatchResult with match_ends, match_scores, player set by id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "MatchResult"
                ],
                "summary": "Show one MatchResult with match_ends, match_scores, player set",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "MatchResult ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success, return MatchResult with scores",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/database.MatchResult"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "player_set": {
                                            "allOf": [
                                                {
                                                    "$ref": "#/definitions/database.PlayerSet"
                                                },
                                                {
                                                    "type": "object",
                                                    "properties": {
                                                        "players": {
                                                            "$ref": "#/definitions/response.Nill"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "invalid match result ID, maybe not exist",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorIdResponse"
                        }
                    },
                    "500": {
                        "description": "internal db failed for getting match result with scores",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorInternalErrorResponse"
                        }
                    }
                }
            }
        },
        "/matchresult/shootoffscore/{id}": {
            "put": {
                "description": "Update one MatchResult shootOffScore by id",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "MatchResult"
                ],
                "summary": "Update one MatchResult shootOffScore",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "MatchResult ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "MatchResult",
                        "name": "MatchResult",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/endpoint.PutMatchResultShootOffScoreById.matchResultShootOffScoreData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success, return nil",
                        "schema": {
                            "$ref": "#/definitions/response.Nill"
                        }
                    },
                    "400": {
                        "description": "invalid match result ID, maybe not exist",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorIdResponse"
                        }
                    },
                    "500": {
                        "description": "internal db failed for updating shootOffScore",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorInternalErrorResponse"
                        }
                    }
                }
            }
        },
        "/matchresult/totalpoints/{id}": {
            "put": {
                "description": "Update one MatchResult totalPoints by id",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "MatchResult"
                ],
                "summary": "Update one MatchResult totalPoints",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "MatchResult ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "MatchResult",
                        "name": "MatchResult",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/endpoint.PutMatchResultTotalPointsById.matchResultTotalPointsData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success, return nil",
                        "schema": {
                            "$ref": "#/definitions/response.Nill"
                        }
                    },
                    "400": {
                        "description": "invalid match result ID, maybe not exist",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorIdResponse"
                        }
                    },
                    "500": {
                        "description": "internal db failed for updating totalPoints",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorInternalErrorResponse"
                        }
                    }
                }
            }
        },
        "/matchresult/{id}": {
            "get": {
                "description": "Get one MatchResult with player set by id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "MatchResult"
                ],
                "summary": "Show one MatchResult with player set",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "MatchResult ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success, return MatchResult with player set",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/database.MatchResult"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "match_ends": {
                                            "$ref": "#/definitions/response.Nill"
                                        },
                                        "player_set": {
                                            "allOf": [
                                                {
                                                    "$ref": "#/definitions/database.PlayerSet"
                                                },
                                                {
                                                    "type": "object",
                                                    "properties": {
                                                        "players": {
                                                            "$ref": "#/definitions/response.Nill"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "invalid match result ID, maybe not exist",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorIdResponse"
                        }
                    },
                    "500": {
                        "description": "internal db failed for getting match result",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorInternalErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete one MatchResult with matchEnds and matchScores by id",
                "tags": [
                    "MatchResult"
                ],
                "summary": "Delete one MatchResult",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "MatchResult ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success, return nil",
                        "schema": {
                            "$ref": "#/definitions/response.Nill"
                        }
                    },
                    "400": {
                        "description": "invalid match result ID, maybe not exist",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorIdResponse"
                        }
                    },
                    "500": {
                        "description": "internal db failed for deleting match result",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorInternalErrorResponse"
                        }
                    }
                }
            }
        },
        "/medal/elimination/{id}": {
            "get": {
                "description": "get medals of elimination by elimination id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Medal"
                ],
                "summary": "Show medals of elimination by elimination id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "elimination ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/database.Medal"
                        }
                    },
                    "400": {
                        "description": "invalid elimination id",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorIdResponse"
                        }
                    },
                    "500": {
                        "description": "internal db error / Get Medal Info By Elimination Id",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorInternalErrorResponse"
                        }
                    }
                }
            }
        },
        "/medal/playersetid/{id}": {
            "put": {
                "description": "update medal's player set id by id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Medal"
                ],
                "summary": "Update medal's player set id by id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Medal ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "PlayerSetId",
                        "name": "PlayerSetId",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success"
                    },
                    "400": {
                        "description": "elimination id of medal and playerset is not same",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorReceiveDataFormatResponse"
                        }
                    },
                    "500": {
                        "description": "internal db error / Get Medal By Id / Get Player Set By Id / Update Medal PLayer Set Id",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorInternalErrorResponse"
                        }
                    }
                }
            }
        },
        "/medal/{id}": {
            "get": {
                "description": "get one medal by id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Medal"
                ],
                "summary": "Show one medal by id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Medal ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/database.Medal"
                        }
                    },
                    "400": {
                        "description": "invalid medal id",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorIdResponse"
                        }
                    },
                    "500": {
                        "description": "internal db error / Get Medal By Id",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorInternalErrorResponse"
                        }
                    }
                }
            }
        },
        "/oldlaneinfo": {
            "post": {
                "description": "Post one new OldLaneInfo data with new id, and return the new OldLaneInfo data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "OldLaneInfo"
                ],
                "summary": "Create one OldLaneInfo",
                "parameters": [
                    {
                        "description": "LaneData",
                        "name": "LaneData",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/oldlaneinfo/confirm/{id}/{stageindex}/{userindex}/{confirm}": {
            "put": {
                "description": "Put one OldLaneInfo confirm by index and id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "OldLaneInfo"
                ],
                "summary": "update one OldLaneInfo confirmation",
                "parameters": [
                    {
                        "type": "string",
                        "description": "OldLaneInfo ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "OldLaneInfo stage index",
                        "name": "stageindex",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "OldLaneInfo user index of the stage",
                        "name": "userindex",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "confirmation of the user",
                        "name": "confirm",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/oldlaneinfo/score/{id}/{stageindex}/{userindex}/{arrowindex}/{score}": {
            "put": {
                "description": "Put one OldLaneInfo score by index and id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "OldLaneInfo"
                ],
                "summary": "update one OldLaneInfo Score",
                "parameters": [
                    {
                        "type": "string",
                        "description": "OldLaneInfo ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "OldLaneInfo stage index",
                        "name": "stageindex",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "OldLaneInfo user index of the stage",
                        "name": "userindex",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "OldLaneInfo arrow index of the user",
                        "name": "arrowindex",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "score of the arrow",
                        "name": "score",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/oldlaneinfo/whole/{id}": {
            "put": {
                "description": "Put whole new OldLaneInfo and overwrite with the id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "OldLaneInfo"
                ],
                "summary": "update one OldLaneInfo",
                "parameters": [
                    {
                        "type": "string",
                        "description": "OldLaneInfo ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "LaneData",
                        "name": "LaneData",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/oldlaneinfo/{id}": {
            "get": {
                "description": "Get one OldLaneInfo by id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "OldLaneInfo"
                ],
                "summary": "Show one OldLaneInfo",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "OldLaneInfo ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "description": "delete one OldLaneInfo by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "OldLaneInfo"
                ],
                "summary": "delete one OldLaneInfo",
                "parameters": [
                    {
                        "type": "string",
                        "description": "OldLaneInfo ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/participant/": {
            "post": {
                "description": "post a particpant to the competition\ncannot repeat participant\nrole cannot be empty\nstatus is always \"pending\"",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Participant"
                ],
                "summary": "post a particpant to the competition",
                "parameters": [
                    {
                        "description": "role",
                        "name": "NewParticipantInfo",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/endpoint.NewParticipantInfo"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/database.Participant"
                        }
                    },
                    "400": {
                        "description": "competition ID is not exist",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorIdResponse"
                        }
                    },
                    "500": {
                        "description": "db error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorInternalErrorResponse"
                        }
                    }
                }
            }
        },
        "/participant/competition": {
            "get": {
                "description": "Get Participants By competition ID, including realname",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Participant"
                ],
                "summary": "Show Participants By competition ID",
                "parameters": [
                    {
                        "description": "competition ID",
                        "name": "competition_id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/endpoint.ParticipantWName"
                            }
                        }
                    },
                    "400": {
                        "description": "invalid competition id",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorIdResponse"
                        }
                    },
                    "500": {
                        "description": "internal db error / Get participants by competition id / Get user by id",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorInternalErrorResponse"
                        }
                    }
                }
            }
        },
        "/participant/competition/user": {
            "get": {
                "description": "Get Participants By competition ID and user ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Participant"
                ],
                "summary": "Show Participants By competition ID and user ID",
                "parameters": [
                    {
                        "description": "competition ID",
                        "name": "competition_id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "user ID",
                        "name": "user_id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/database.Participant"
                            }
                        }
                    },
                    "400": {
                        "description": "invalid competition id",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorIdResponse"
                        }
                    },
                    "500": {
                        "description": "internal db error / Get participants by competition id and user id",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorInternalErrorResponse"
                        }
                    }
                }
            }
        },
        "/participant/user": {
            "get": {
                "description": "Get Participants By user ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Participant"
                ],
                "summary": "Show Participants By user ID",
                "parameters": [
                    {
                        "description": "user ID",
                        "name": "user_id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/database.Participant"
                            }
                        }
                    },
                    "400": {
                        "description": "invalid user id",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorIdResponse"
                        }
                    },
                    "500": {
                        "description": "db error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorInternalErrorResponse"
                        }
                    }
                }
            }
        },
        "/participant/whole/{id}": {
            "put": {
                "description": "Put whole new Participant and overwrite with the id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Participant"
                ],
                "summary": "update one Participant",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Participant ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Participant",
                        "name": "Participant",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/database.Participant"
                        }
                    },
                    "400": {
                        "description": "invalid participant id",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorIdResponse"
                        }
                    },
                    "500": {
                        "description": "internal db error / Update Participant",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorInternalErrorResponse"
                        }
                    }
                }
            }
        },
        "/participant/{id}": {
            "get": {
                "description": "Get One Participant By ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Participant"
                ],
                "summary": "Show One Participant By ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Participant ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/database.Participant"
                        }
                    },
                    "400": {
                        "description": "invalid participant id",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorIdResponse"
                        }
                    },
                    "500": {
                        "description": "db error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorInternalErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "delete one Participant by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Participant"
                ],
                "summary": "delete one Participant",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Participant ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/response.DeleteSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "invalid participant id",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorIdResponse"
                        }
                    },
                    "500": {
                        "description": "internal db error / Delete Participant",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorInternalErrorResponse"
                        }
                    }
                }
            }
        },
        "/player/all-endscores/{endid}": {
            "put": {
                "description": "Update all scores of one end by end id\nWill auto update player total score\nShould have a 6 element array scores array",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Player"
                ],
                "summary": "Update all scores of one end by end id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "End ID",
                        "name": "endid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Scores",
                        "name": "scores",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/endpoint.PutPlayerAllEndScoresByEndId.EndScores"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/response.Nill"
                        }
                    },
                    "400": {
                        "description": "invalid end id parameter, may not exist, or length of scores not equal to 6",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorIdResponse"
                        }
                    },
                    "500": {
                        "description": "internal db error for updating player end scores, get round score ids",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorInternalErrorResponse"
                        }
                    }
                }
            }
        },
        "/player/dummy/{participantid}": {
            "get": {
                "description": "Get dummy players by participant id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Player"
                ],
                "summary": "Show dummy players",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Participant ID",
                        "name": "participantid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success, show dummy players info",
                        "schema": {
                            "type": "array",
                            "items": {
                                "allOf": [
                                    {
                                        "$ref": "#/definitions/database.Player"
                                    },
                                    {
                                        "type": "object",
                                        "properties": {
                                            "player_sets": {
                                                "$ref": "#/definitions/response.Nill"
                                            },
                                            "rounds": {
                                                "$ref": "#/definitions/response.Nill"
                                            }
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    "400": {
                        "description": "invalid participant id parameter, may not exist",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorIdResponse"
                        }
                    },
                    "500": {
                        "description": "internal db error for getting dummy players",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorInternalErrorResponse"
                        }
                    }
                }
            }
        },
        "/player/dummy/{playerid}": {
            "post": {
                "description": "Create dummy player by player id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Player"
                ],
                "summary": "Create dummy player",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Player ID",
                        "name": "playerid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success, show dummy player info",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/database.Player"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "player_sets": {
                                            "$ref": "#/definitions/response.Nill"
                                        },
                                        "rounds": {
                                            "$ref": "#/definitions/response.Nill"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "invalid player id parameter, may not exist",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorIdResponse"
                        }
                    },
                    "500": {
                        "description": "internal db error for creating dummy player",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorInternalErrorResponse"
                        }
                    }
                }
            }
        },
        "/player/group/{playerid}": {
            "put": {
                "description": "Update one Player groupId by id, and change player laneid to Unassigned lane",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Player"
                ],
                "summary": "Update one Player groupId by id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Player ID",
                        "name": "playerid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "UpdateGroupIdData",
                        "name": "groupid",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/endpoint.PutPlayerGroupId.UpdateGroupIdData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success, show player info",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/database.Player"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "player_sets": {
                                            "$ref": "#/definitions/response.Nill"
                                        },
                                        "rounds": {
                                            "$ref": "#/definitions/response.Nill"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "invalid player id, group id parameter, may not exist",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorIdResponse"
                        }
                    },
                    "500": {
                        "description": "internal db error for updating player groupId, or get player info, or get unassigned lane id",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorInternalErrorResponse"
                        }
                    }
                }
            }
        },
        "/player/isconfirmed/{roundendid}": {
            "put": {
                "description": "Update one Player isConfirmed by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Player"
                ],
                "summary": "Update one Player isConfirmed by id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "RoundEnd ID",
                        "name": "roundendid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "UpdateIsConfirmedData",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/endpoint.PutPlayerIsConfirmed.UpdateIsConfirmedData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/response.Nill"
                        }
                    },
                    "400": {
                        "description": "invalid roundend id parameter, may not exist",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorIdResponse"
                        }
                    },
                    "500": {
                        "description": "internal db error for updating player isConfirmed",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorInternalErrorResponse"
                        }
                    }
                }
            }
        },
        "/player/lane/{id}": {
            "put": {
                "description": "Update one Player laneId by id, update lane playernum",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Player"
                ],
                "summary": "Update one Player laneId by id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Player ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "UpdateLaneIdData",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/endpoint.PutPlayerLaneId.UpdateLaneIdData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success, show player info",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/database.Player"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "player_sets": {
                                            "$ref": "#/definitions/response.Nill"
                                        },
                                        "rounds": {
                                            "$ref": "#/definitions/response.Nill"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "invalid player id, lane id parameter, may not exist",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorIdResponse"
                        }
                    },
                    "500": {
                        "description": "internal db error for updating player laneid, or get player info",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorInternalErrorResponse"
                        }
                    }
                }
            }
        },
        "/player/order/{id}": {
            "put": {
                "description": "Update one Player order by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Player"
                ],
                "summary": "Update one Player order by id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Player ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "UpdateOrderData",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/endpoint.PutPlayerOrder.UpdateOrderData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success, show player info",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/database.Player"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "player_sets": {
                                            "$ref": "#/definitions/response.Nill"
                                        },
                                        "rounds": {
                                            "$ref": "#/definitions/response.Nill"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "invalid player id parameter, may not exist",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorIdResponse"
                        }
                    },
                    "500": {
                        "description": "internal db error for updating player order, or get player info",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorInternalErrorResponse"
                        }
                    }
                }
            }
        },
        "/player/playersets/{id}/{eliminationid}": {
            "get": {
                "description": "Get one Player with player sets by id and elimination id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Player"
                ],
                "summary": "Show one Player with player sets",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Player ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Elimination ID",
                        "name": "eliminationid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success, show player sets, but no rounds",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/database.Player"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "player_sets": {
                                            "allOf": [
                                                {
                                                    "$ref": "#/definitions/database.PlayerSet"
                                                },
                                                {
                                                    "type": "object",
                                                    "properties": {
                                                        "players": {
                                                            "$ref": "#/definitions/response.Nill"
                                                        }
                                                    }
                                                }
                                            ]
                                        },
                                        "rounds": {
                                            "$ref": "#/definitions/response.Nill"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "invalid player id parameter, elimination id parameter, may not exist",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorIdResponse"
                        }
                    },
                    "500": {
                        "description": "internal db error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorInternalErrorResponse"
                        }
                    }
                }
            }
        },
        "/player/roundend": {
            "post": {
                "description": "Create one RoundEnd by round id, IsComfirmed is false",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Player"
                ],
                "summary": "Create one RoundEnd by Round ID",
                "parameters": [
                    {
                        "description": "RoundEnd",
                        "name": "RoundEnd",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/endpoint.PostRoundEnd.RoundEndData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success, show roundend info",
                        "schema": {
                            "$ref": "#/definitions/database.RoundEnd"
                        }
                    },
                    "400": {
                        "description": "invalid round id parameter, may not exist",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorIdResponse"
                        }
                    },
                    "500": {
                        "description": "internal db error for creating roundend",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorInternalErrorResponse"
                        }
                    }
                }
            }
        },
        "/player/roundscore": {
            "post": {
                "description": "Create one RoundScore by roundend id, and update total score in rounds",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Player"
                ],
                "summary": "Create one RoundScore by RoundEnd ID",
                "parameters": [
                    {
                        "description": "RoundScore",
                        "name": "RoundScore",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/endpoint.UpdateTotalScoreData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success, show roundscore info",
                        "schema": {
                            "$ref": "#/definitions/database.RoundScore"
                        }
                    },
                    "400": {
                        "description": "invalid roundend id, player id, round id parameter, may not exist",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorIdResponse"
                        }
                    },
                    "500": {
                        "description": "internal db error for creating roundscore, get old score, update total score",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorInternalErrorResponse"
                        }
                    }
                }
            }
        },
        "/player/roundscore/{roundscoreid}": {
            "put": {
                "description": "Update one Player score by id\nUpdate doesn't change total score in player, round, roundend",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Player"
                ],
                "summary": "Update one Player score by id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "RoundScore ID",
                        "name": "roundscoreid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "UpdateTotalScoreData",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/endpoint.UpdateTotalScoreData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/response.Nill"
                        }
                    },
                    "400": {
                        "description": "invalid roundscore id, player id, round id, roundend id parameter, may not exist",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorIdResponse"
                        }
                    },
                    "500": {
                        "description": "internal db error for updating player score, get old score, update total score",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorInternalErrorResponse"
                        }
                    }
                }
            }
        },
        "/player/scores/{id}": {
            "get": {
                "description": "Get one Player with rounds, roundends, roundscores by id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Player"
                ],
                "summary": "Show one Player with scores",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Player ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success, show rounds, roundends, roundscores, but no player sets",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/database.Player"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "player_sets": {
                                            "$ref": "#/definitions/response.Nill"
                                        },
                                        "rounds": {
                                            "allOf": [
                                                {
                                                    "$ref": "#/definitions/database.Round"
                                                },
                                                {
                                                    "type": "object",
                                                    "properties": {
                                                        "round_ends": {
                                                            "allOf": [
                                                                {
                                                                    "$ref": "#/definitions/database.RoundEnd"
                                                                },
                                                                {
                                                                    "type": "object",
                                                                    "properties": {
                                                                        "round_scores": {
                                                                            "$ref": "#/definitions/database.RoundScore"
                                                                        }
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "invalid player id parameter, may not exist",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorIdResponse"
                        }
                    },
                    "500": {
                        "description": "internal db error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorInternalErrorResponse"
                        }
                    }
                }
            }
        },
        "/player/shootoffscore/{id}": {
            "put": {
                "description": "Update one Player shootoffScore by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Player"
                ],
                "summary": "Update one Player shootoffScore by id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Player ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "UpdateShootoffScoreData",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/endpoint.PutPlayerShootoffScore.UpdateShootoffScoreData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success, show player info",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/database.Player"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "player_sets": {
                                            "$ref": "#/definitions/response.Nill"
                                        },
                                        "rounds": {
                                            "$ref": "#/definitions/response.Nill"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "invalid player id parameter, may not exist",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorIdResponse"
                        }
                    },
                    "500": {
                        "description": "internal db error for updating player shootoffScore, or get player info",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorInternalErrorResponse"
                        }
                    }
                }
            }
        },
        "/player/totalscore/{id}": {
            "put": {
                "description": "Update one Player total score by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Player"
                ],
                "summary": "Update one Player total score by id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Player ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "UpdateTotalScoreData",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/endpoint.PutPlayerTotalScoreByplayerId.UpdateTotalScoreData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/response.Nill"
                        }
                    },
                    "204": {
                        "description": "no change",
                        "schema": {
                            "$ref": "#/definitions/response.Nill"
                        }
                    },
                    "400": {
                        "description": "invalid player id parameter, may not exist",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorIdResponse"
                        }
                    },
                    "500": {
                        "description": "internal db error for updating player total score",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorInternalErrorResponse"
                        }
                    }
                }
            }
        },
        "/player/{id}": {
            "get": {
                "description": "Get one Player without other data by id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Player"
                ],
                "summary": "Show one Player info without other data",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Player ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success, but no rounds, player sets",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/database.Player"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "player_sets": {
                                            "$ref": "#/definitions/response.Nill"
                                        },
                                        "rounds": {
                                            "$ref": "#/definitions/response.Nill"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "invalid player id parameter, may not exist",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorIdResponse"
                        }
                    },
                    "500": {
                        "description": "internal db error",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorInternalErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete one Player by id, delete related round, roundend, roundscore data, and playerNum minus one in lane",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Player"
                ],
                "summary": "Delete one Player by id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Player ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successfully delete player",
                        "schema": {
                            "$ref": "#/definitions/response.DeleteSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "invalid player id parameter, may not exist",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorIdResponse"
                        }
                    },
                    "500": {
                        "description": "internal db error for deleting player",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorInternalErrorResponse"
                        }
                    }
                }
            }
        },
        "/player/{participantid}": {
            "post": {
                "description": "Create one Player by participant id\nCreate related rounds by laneNum of competition, create 6 roundscores for each 6 roundends, UnassignedLane playerNum ++",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Player"
                ],
                "summary": "Create one Player by Participant ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Participant ID",
                        "name": "participantid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success, show player info",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/database.Player"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "player_sets": {
                                            "$ref": "#/definitions/response.Nill"
                                        },
                                        "rounds": {
                                            "$ref": "#/definitions/response.Nill"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "invalid participant id parameter, may not exist",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorIdResponse"
                        }
                    },
                    "500": {
                        "description": "internal db error to create player, round, roundend, roundscore",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorInternalErrorResponse"
                        }
                    }
                }
            }
        },
        "/playerset": {
            "post": {
                "description": "Post player set, and build player set match table\nIf team size is 1, set name will be player name",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PlayerSet"
                ],
                "summary": "Post player set",
                "parameters": [
                    {
                        "description": "Player Set Data",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/endpoint.PostPlayerSet.playerSetData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success, return player set without players",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/database.PlayerSet"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "players": {
                                            "$ref": "#/definitions/response.Nill"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "invalid elimination id, player id maybe not exist / player set's length and teamsize does not match",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorIdResponse"
                        }
                    },
                    "500": {
                        "description": "internal db error for create player set / get player / create player set match table / get elimination",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorInternalErrorResponse"
                        }
                    }
                }
            }
        },
        "/playerset/elimination/medal/{eliminationid}": {
            "get": {
                "description": "Get player sets which have medals by elimination id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PlayerSet"
                ],
                "summary": "Get player sets which have medals by elimination id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Elimination ID",
                        "name": "eliminationid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/endpoint.GetPlayerSetsByMedalByEliminationId.playerSetData"
                            }
                        }
                    },
                    "400": {
                        "description": "invalid elimination id",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorIdResponse"
                        }
                    },
                    "500": {
                        "description": "internal db error / Get Medal Info By Elimination Id",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorInternalErrorResponse"
                        }
                    }
                }
            }
        },
        "/playerset/elimination/{eliminationid}": {
            "get": {
                "description": "Get all player sets by elimination id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PlayerSet"
                ],
                "summary": "Get all player sets by elimination id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Elimination ID",
                        "name": "eliminationid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/database.PlayerSet"
                            }
                        }
                    },
                    "400": {
                        "description": "invalid player set id",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorIdResponse"
                        }
                    },
                    "500": {
                        "description": "internal db error / Get Player Sets By Elimination Id",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorInternalErrorResponse"
                        }
                    }
                }
            }
        },
        "/playerset/name/{id}": {
            "put": {
                "description": "Put player set name",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PlayerSet"
                ],
                "summary": "Put player set name",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Player Set ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Player Set Data",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success"
                    },
                    "400": {
                        "description": "teamsize of elimination should not be 1",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorReceiveDataFormatResponse"
                        }
                    },
                    "500": {
                        "description": "internal db error / Get Player Set By Id / Update Player Set Name",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorInternalErrorResponse"
                        }
                    }
                }
            }
        },
        "/playerset/preranking/{eliminationid}": {
            "put": {
                "description": "Put player set rank by elimination id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PlayerSet"
                ],
                "summary": "Put player set rank",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Elimination ID",
                        "name": "eliminationid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success"
                    },
                    "500": {
                        "description": "internal db error / Get Elimination Player Set Id Rank Order By Id / Update Player Set Rank",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorInternalErrorResponse"
                        }
                    }
                }
            }
        },
        "/playerset/{id}": {
            "get": {
                "description": "Get player set with players by id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PlayerSet"
                ],
                "summary": "Get player set with players by id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Player Set ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success, return player set with players",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/database.PlayerSet"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "players": {
                                            "allOf": [
                                                {
                                                    "$ref": "#/definitions/database.Player"
                                                },
                                                {
                                                    "type": "object",
                                                    "properties": {
                                                        "player_sets": {
                                                            "$ref": "#/definitions/response.Nill"
                                                        },
                                                        "rounds": {
                                                            "$ref": "#/definitions/response.Nill"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "invalid player set id, maybe not exist",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorIdResponse"
                        }
                    },
                    "500": {
                        "description": "internal error for get player set by id",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorInternalErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete player set, and delete player set match table",
                "tags": [
                    "PlayerSet"
                ],
                "summary": "Delete player set",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Player Set ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/response.DeleteSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "invalid plyer set id",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorIdResponse"
                        }
                    },
                    "500": {
                        "description": "internal db error / Get Player Set By Id / Delete Player Set Match Table By Player Set Id / Delete Player Set By Id",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorInternalErrorResponse"
                        }
                    }
                }
            }
        },
        "/qualification/lanes/players/{id}": {
            "get": {
                "description": "Get one Qualification with Lanes and Players by id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Qualification"
                ],
                "summary": "Show one Qualification",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Qualification ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success, return Qualification with lanes and players",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/database.Qualification"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "lanes": {
                                            "allOf": [
                                                {
                                                    "$ref": "#/definitions/database.Lane"
                                                },
                                                {
                                                    "type": "object",
                                                    "properties": {
                                                        "players": {
                                                            "allOf": [
                                                                {
                                                                    "$ref": "#/definitions/database.Player"
                                                                },
                                                                {
                                                                    "type": "object",
                                                                    "properties": {
                                                                        "player_sets": {
                                                                            "$ref": "#/definitions/response.Nill"
                                                                        },
                                                                        "rounds": {
                                                                            "$ref": "#/definitions/response.Nill"
                                                                        }
                                                                    }
                                                                }
                                                            ]
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "invalid qualification id",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorIdResponse"
                        }
                    },
                    "500": {
                        "description": "internall db error / Get Qualification With Lanes and Players",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorInternalErrorResponse"
                        }
                    }
                }
            }
        },
        "/qualification/lanes/unassigned/{id}": {
            "get": {
                "description": "Get one Qualification with Unassigned Lanes by id.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Qualification"
                ],
                "summary": "Show one Qualification with Unassigned Lanes.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Qualification ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success, return Qualification with Unassigned lanes",
                        "schema": {
                            "type": "array",
                            "items": {
                                "allOf": [
                                    {
                                        "$ref": "#/definitions/database.Qualification"
                                    },
                                    {
                                        "type": "object",
                                        "properties": {
                                            "lanes": {
                                                "allOf": [
                                                    {
                                                        "$ref": "#/definitions/database.Lane"
                                                    },
                                                    {
                                                        "type": "object",
                                                        "properties": {
                                                            "players": {
                                                                "allOf": [
                                                                    {
                                                                        "$ref": "#/definitions/database.Player"
                                                                    },
                                                                    {
                                                                        "type": "object",
                                                                        "properties": {
                                                                            "player_sets": {
                                                                                "$ref": "#/definitions/response.Nill"
                                                                            },
                                                                            "rounds": {
                                                                                "$ref": "#/definitions/response.Nill"
                                                                            }
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        }
                                                    }
                                                ]
                                            }
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    "400": {
                        "description": "invalid qualification id",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorIdResponse"
                        }
                    },
                    "500": {
                        "description": "internall db error / Get Qualification With Lanes and Players / Get Qualification With Unassigned Lanes By ID",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorInternalErrorResponse"
                        }
                    }
                }
            }
        },
        "/qualification/lanes/{id}": {
            "get": {
                "description": "Get one Qualification with Lanes by id.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Qualification"
                ],
                "summary": "Show one Qualification with Lanes.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Qualification ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success, return Qualification with lanes",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/database.Qualification"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "lanes": {
                                            "allOf": [
                                                {
                                                    "$ref": "#/definitions/database.Lane"
                                                },
                                                {
                                                    "type": "object",
                                                    "properties": {
                                                        "players": {
                                                            "$ref": "#/definitions/response.Nill"
                                                        }
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "invalid qualification id",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorIdResponse"
                        }
                    },
                    "500": {
                        "description": "internall db error / Get Qualification With Lanes",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorInternalErrorResponse"
                        }
                    }
                }
            }
        },
        "/qualification/whole/{id}": {
            "put": {
                "description": "Put whole new Qualification and overwrite with the id, and update lanes below it ,but cannot replace groupid.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Qualification"
                ],
                "summary": "Update one Qualification.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Qualification ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Qualification",
                        "name": "Qualification",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/endpoint.PutQualificationByID.QualificationPutData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success, return updated Qualification",
                        "schema": {
                            "$ref": "#/definitions/database.Qualification"
                        }
                    },
                    "400": {
                        "description": "invalid qualification id / invalid lane id / lane is already occupied / invalid start or end lane number / Qualification is belong to UnassignedGroup, when update Qualification",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorIdResponse"
                        }
                    },
                    "500": {
                        "description": "internal db error / Update Lane Qualification Id / Update Qualification / Get Only Qualification",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorInternalErrorResponse"
                        }
                    }
                }
            }
        },
        "/qualification/{id}": {
            "get": {
                "description": "Get one Qualification without Lanes by id.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Qualification"
                ],
                "summary": "Show one Qualification without Lanes.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Qualification ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success, return Qualification without lanes",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/database.Qualification"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "lanes": {
                                            "$ref": "#/definitions/response.Nill"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "invalid qualification id",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorIdResponse"
                        }
                    },
                    "500": {
                        "description": "internall db error / Get Only Qualification",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorInternalErrorResponse"
                        }
                    }
                }
            }
        },
        "/session": {
            "post": {
                "description": "get a session",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Session"
                ],
                "summary": "login",
                "parameters": [
                    {
                        "description": "user_name, password",
                        "name": "LoginInfo",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/endpoint.LoginInfo"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "already loginned",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "invalid login info",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorReceiveDataFormatResponse"
                        }
                    },
                    "401": {
                        "description": "incorrect password",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "delete the session",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Session"
                ],
                "summary": "logout",
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/swagger/doc.json": {
            "get": {
                "description": "get Api docs in json",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "docs"
                ],
                "summary": "Show Api Docs in json",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user": {
            "post": {
                "description": "add a user to db\nno need to post id\nusername cannot be empty or repeated\npassword cannot be empty\nemail cannot be empty or repeated",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "register a user",
                "parameters": [
                    {
                        "description": "nessary information for register",
                        "name": "AccountInfo",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/endpoint.AccountInfo"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "a user object",
                        "schema": {
                            "$ref": "#/definitions/database.User"
                        }
                    },
                    "400": {
                        "description": "username/email exists | empty username/password/email/institutionID | invalid info",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "db error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/user/me": {
            "get": {
                "description": "get my uid in the session",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "get my uid",
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "id": {
                                            "type": "integer"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/user/password/{id}": {
            "put": {
                "description": "modify user's password\ncannot change other's password\noriginal password cannot be empty\nnew password cannot be empty\noriginal password must be correct\nnew password cannot be the same as original password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "modify user's password",
                "parameters": [
                    {
                        "type": "string",
                        "description": "user's id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "modified password information",
                        "name": "ModifyInfo",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/endpoint.ModifyAccountPasswordInfo"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "empty/invalid user id | invalid modified information",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "403": {
                        "description": "cannot change other's password | wrong original password | original \u0026 modified passwords are the same",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "internal db error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/user/{id}": {
            "get": {
                "description": "get a user's username, overview, and institution id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "get a user's information",
                "parameters": [
                    {
                        "type": "string",
                        "description": "user's id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/database.User"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "empty/invalid user id",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "404": {
                        "description": "no user found",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "put": {
                "description": "modify username, realname, email, overview, and institution_id\ncannot change other's info\ncannot change password\nusername cannot be empty, repeated\nemail cannot be empty, repeated",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "modify user's information",
                "parameters": [
                    {
                        "type": "string",
                        "description": "user's id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "modified information",
                        "name": "ModifyInfo",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/database.User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "empty/invalid user id | invalid modified information",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "403": {
                        "description": "cannot change other's info | wrong original password",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "internal db error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "database.Competition": {
            "type": "object",
            "properties": {
                "current_phase": {
                    "type": "integer"
                },
                "elimination_is_active": {
                    "type": "boolean"
                },
                "end_time": {
                    "type": "string"
                },
                "groups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/database.Group"
                    }
                },
                "groups_num": {
                    "type": "integer"
                },
                "host_id": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "lanes_num": {
                    "type": "integer"
                },
                "mixed_elimination_is_active": {
                    "type": "boolean"
                },
                "participants": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/database.Participant"
                    }
                },
                "qualification_current_end": {
                    "type": "integer"
                },
                "qualification_is_active": {
                    "type": "boolean"
                },
                "rounds_num": {
                    "type": "integer"
                },
                "script": {
                    "type": "string"
                },
                "start_time": {
                    "type": "string"
                },
                "sub_title": {
                    "type": "string"
                },
                "team_elimination_is_active": {
                    "type": "boolean"
                },
                "title": {
                    "type": "string"
                },
                "unassigned_group_id": {
                    "type": "integer"
                },
                "unassigned_lane_id": {
                    "type": "integer"
                }
            }
        },
        "database.Elimination": {
            "type": "object",
            "properties": {
                "current_end": {
                    "type": "integer"
                },
                "current_stage": {
                    "type": "integer"
                },
                "group_id": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "medals": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/database.Medal"
                    }
                },
                "player_sets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/database.PlayerSet"
                    }
                },
                "stages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/database.Stage"
                    }
                },
                "team_size": {
                    "type": "integer"
                }
            }
        },
        "database.Group": {
            "type": "object",
            "properties": {
                "bow_type": {
                    "type": "string"
                },
                "competition_id": {
                    "type": "integer"
                },
                "group_index": {
                    "type": "integer"
                },
                "group_name": {
                    "type": "string"
                },
                "group_range": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "players": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/database.Player"
                    }
                }
            }
        },
        "database.Institution": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "database.Lane": {
            "type": "object",
            "properties": {
                "competition_id": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "lane_number": {
                    "type": "integer"
                },
                "players": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/database.Player"
                    }
                },
                "qualification_id": {
                    "type": "integer"
                }
            }
        },
        "database.Match": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "match_results": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/database.MatchResult"
                    }
                },
                "stage_id": {
                    "type": "integer"
                }
            }
        },
        "database.MatchEnd": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "is_confirmed": {
                    "type": "boolean"
                },
                "match_result_id": {
                    "type": "integer"
                },
                "match_scores": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/database.MatchScore"
                    }
                },
                "total_scores": {
                    "type": "integer"
                }
            }
        },
        "database.MatchResult": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "is_winner": {
                    "type": "boolean"
                },
                "lane_number": {
                    "type": "integer"
                },
                "match_ends": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/database.MatchEnd"
                    }
                },
                "match_id": {
                    "type": "integer"
                },
                "player_set": {
                    "$ref": "#/definitions/database.PlayerSet"
                },
                "player_set_id": {
                    "type": "integer"
                },
                "shoot_off_score": {
                    "type": "integer"
                },
                "total_points": {
                    "type": "integer"
                }
            }
        },
        "database.MatchScore": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "match_end_id": {
                    "type": "integer"
                },
                "score": {
                    "type": "integer"
                }
            }
        },
        "database.Medal": {
            "type": "object",
            "properties": {
                "elimination_id": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "player_set_id": {
                    "type": "integer"
                },
                "type": {
                    "type": "integer"
                }
            }
        },
        "database.Participant": {
            "type": "object",
            "properties": {
                "competitionID": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "role": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "userID": {
                    "type": "integer"
                }
            }
        },
        "database.Player": {
            "type": "object",
            "properties": {
                "group_id": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "lane_id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "order": {
                    "type": "integer"
                },
                "participant_id": {
                    "type": "integer"
                },
                "player_sets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/database.PlayerSet"
                    }
                },
                "rank": {
                    "type": "integer"
                },
                "rounds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/database.Round"
                    }
                },
                "shoot_off_score": {
                    "type": "integer"
                },
                "total_score": {
                    "type": "integer"
                }
            }
        },
        "database.PlayerSet": {
            "type": "object",
            "properties": {
                "elimination_id": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "players": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/database.Player"
                    }
                },
                "rank": {
                    "type": "integer"
                },
                "set_name": {
                    "type": "string"
                },
                "total_score": {
                    "type": "integer"
                }
            }
        },
        "database.Qualification": {
            "type": "object",
            "properties": {
                "advancing_num": {
                    "type": "integer"
                },
                "end_lane": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "lanes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/database.Lane"
                    }
                },
                "start_lane": {
                    "type": "integer"
                }
            }
        },
        "database.Round": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "player_id": {
                    "type": "integer"
                },
                "round_ends": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/database.RoundEnd"
                    }
                },
                "total_score": {
                    "type": "integer"
                }
            }
        },
        "database.RoundEnd": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "is_confirmed": {
                    "type": "boolean"
                },
                "round_id": {
                    "type": "integer"
                },
                "round_scores": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/database.RoundScore"
                    }
                }
            }
        },
        "database.RoundScore": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "round_end_id": {
                    "type": "integer"
                },
                "score": {
                    "type": "integer"
                }
            }
        },
        "database.Stage": {
            "type": "object",
            "properties": {
                "elimination_id": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "matchs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/database.Match"
                    }
                }
            }
        },
        "database.User": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "institution_id": {
                    "type": "integer"
                },
                "overview": {
                    "type": "string"
                },
                "real_name": {
                    "type": "string"
                },
                "user_name": {
                    "type": "string"
                }
            }
        },
        "endpoint.AccountInfo": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "institution_id": {
                    "type": "integer"
                },
                "overview": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "real_name": {
                    "type": "string"
                },
                "user_name": {
                    "type": "string"
                }
            }
        },
        "endpoint.CompetitionWGroupsQuaEliData": {
            "type": "object",
            "properties": {
                "competition_id": {
                    "type": "integer"
                },
                "group_data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/endpoint.GroupData"
                    }
                }
            }
        },
        "endpoint.EliminationData": {
            "type": "object",
            "properties": {
                "elimination_id": {
                    "type": "integer"
                },
                "team_size": {
                    "type": "integer"
                }
            }
        },
        "endpoint.GetPlayerSetsByMedalByEliminationId.playerSetData": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "set_name": {
                    "type": "string"
                },
                "type": {
                    "type": "integer"
                }
            }
        },
        "endpoint.GroupData": {
            "type": "object",
            "properties": {
                "bow_type": {
                    "type": "string"
                },
                "elimination_data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/endpoint.EliminationData"
                    }
                },
                "group_id": {
                    "type": "integer"
                },
                "group_name": {
                    "type": "string"
                },
                "group_range": {
                    "type": "string"
                }
            }
        },
        "endpoint.LoginInfo": {
            "type": "object",
            "properties": {
                "password": {
                    "type": "string"
                },
                "user_name": {
                    "type": "string"
                }
            }
        },
        "endpoint.ModifyAccountPasswordInfo": {
            "type": "object",
            "properties": {
                "new_password": {
                    "type": "string"
                },
                "original_password": {
                    "type": "string"
                }
            }
        },
        "endpoint.NewInstitutionInfo": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                }
            }
        },
        "endpoint.NewParticipantInfo": {
            "type": "object",
            "properties": {
                "competition_id": {
                    "type": "integer"
                },
                "role": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "endpoint.ParticipantWName": {
            "type": "object",
            "properties": {
                "competition_id": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "endpoint.PostCompetition.CompetitionPostData": {
            "type": "object",
            "properties": {
                "end_time": {
                    "type": "string"
                },
                "host_id": {
                    "type": "integer"
                },
                "lanes_num": {
                    "type": "integer"
                },
                "rounds_num": {
                    "type": "integer"
                },
                "script": {
                    "type": "string"
                },
                "start_time": {
                    "type": "string"
                },
                "sub_title": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "endpoint.PostElimination.PostEliminationData": {
            "type": "object",
            "properties": {
                "group_id": {
                    "type": "integer"
                },
                "team_size": {
                    "type": "integer"
                }
            }
        },
        "endpoint.PostGroupInfo.GroupData": {
            "type": "object",
            "properties": {
                "bow_type": {
                    "type": "string"
                },
                "competition_id": {
                    "type": "integer"
                },
                "group_index": {
                    "type": "integer"
                },
                "group_name": {
                    "type": "string"
                },
                "group_range": {
                    "type": "string"
                }
            }
        },
        "endpoint.PostMatch.MatchData": {
            "type": "object",
            "properties": {
                "lane_numbers": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "player_set_ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "stage_id": {
                    "type": "integer"
                }
            }
        },
        "endpoint.PostMatchEnd.matchEndData": {
            "type": "object",
            "properties": {
                "match_result_id": {
                    "type": "integer"
                },
                "team_size": {
                    "type": "integer"
                }
            }
        },
        "endpoint.PostPlayerSet.playerSetData": {
            "type": "object",
            "properties": {
                "elimination_id": {
                    "type": "integer"
                },
                "player_ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "set_name": {
                    "type": "string"
                }
            }
        },
        "endpoint.PostRoundEnd.RoundEndData": {
            "type": "object",
            "properties": {
                "round_id": {
                    "type": "integer"
                }
            }
        },
        "endpoint.PostStage.PostStageData": {
            "type": "object",
            "properties": {
                "elimination_id": {
                    "type": "integer"
                }
            }
        },
        "endpoint.PutCompetition.CompetitionPutData": {
            "type": "object",
            "properties": {
                "current_phase": {
                    "type": "integer"
                },
                "end_time": {
                    "type": "string"
                },
                "qualification_current_end": {
                    "type": "integer"
                },
                "script": {
                    "type": "string"
                },
                "start_time": {
                    "type": "string"
                },
                "sub_title": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "endpoint.PutGroupInfo.GroupData": {
            "type": "object",
            "properties": {
                "bow_type": {
                    "type": "string"
                },
                "group_index": {
                    "type": "integer"
                },
                "group_name": {
                    "type": "string"
                },
                "group_range": {
                    "type": "string"
                }
            }
        },
        "endpoint.PutMatchEndsIsConfirmedById.matchEndIsConfirmedData": {
            "type": "object",
            "properties": {
                "is_confirmed": {
                    "type": "boolean"
                }
            }
        },
        "endpoint.PutMatchEndsScoresById.matchEndScoresData": {
            "type": "object",
            "properties": {
                "match_score_ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "scores": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "total_scores": {
                    "type": "integer"
                }
            }
        },
        "endpoint.PutMatchEndsTotalScoresById.matchEndTotalScoresData": {
            "type": "object",
            "properties": {
                "total_scores": {
                    "type": "integer"
                }
            }
        },
        "endpoint.PutMatchResultIsWinnerById.matchResultIsWinnerData": {
            "type": "object",
            "properties": {
                "is_winner": {
                    "type": "boolean"
                }
            }
        },
        "endpoint.PutMatchResultLaneNumberById.matchResultLaneNumberData": {
            "type": "object",
            "properties": {
                "lane_number": {
                    "type": "integer"
                }
            }
        },
        "endpoint.PutMatchResultShootOffScoreById.matchResultShootOffScoreData": {
            "type": "object",
            "properties": {
                "shoot_off_score": {
                    "type": "integer"
                }
            }
        },
        "endpoint.PutMatchResultTotalPointsById.matchResultTotalPointsData": {
            "type": "object",
            "properties": {
                "total_points": {
                    "type": "integer"
                }
            }
        },
        "endpoint.PutMatchScoreScoreById.matchScoreData": {
            "type": "object",
            "properties": {
                "score": {
                    "type": "integer"
                }
            }
        },
        "endpoint.PutPlayerAllEndScoresByEndId.EndScores": {
            "type": "object",
            "properties": {
                "scores": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "endpoint.PutPlayerGroupId.UpdateGroupIdData": {
            "type": "object",
            "properties": {
                "group_id": {
                    "type": "integer"
                }
            }
        },
        "endpoint.PutPlayerIsConfirmed.UpdateIsConfirmedData": {
            "type": "object",
            "properties": {
                "is_confirmed": {
                    "type": "boolean"
                }
            }
        },
        "endpoint.PutPlayerLaneId.UpdateLaneIdData": {
            "type": "object",
            "properties": {
                "lane_id": {
                    "type": "integer"
                }
            }
        },
        "endpoint.PutPlayerOrder.UpdateOrderData": {
            "type": "object",
            "properties": {
                "order": {
                    "type": "integer"
                }
            }
        },
        "endpoint.PutPlayerShootoffScore.UpdateShootoffScoreData": {
            "type": "object",
            "properties": {
                "shoot_off_score": {
                    "type": "integer"
                }
            }
        },
        "endpoint.PutPlayerTotalScoreByplayerId.UpdateTotalScoreData": {
            "type": "object",
            "properties": {
                "new_score": {
                    "type": "integer"
                }
            }
        },
        "endpoint.PutQualificationByID.QualificationPutData": {
            "type": "object",
            "properties": {
                "advancing_num": {
                    "type": "integer"
                },
                "end_lane": {
                    "type": "integer"
                },
                "start_lane": {
                    "type": "integer"
                }
            }
        },
        "endpoint.UpdateTotalScoreData": {
            "type": "object",
            "properties": {
                "player_id": {
                    "type": "integer"
                },
                "round_end_id": {
                    "type": "integer"
                },
                "round_id": {
                    "type": "integer"
                },
                "score": {
                    "type": "integer"
                }
            }
        },
        "endpoint.groupIdsForReorder": {
            "type": "object",
            "properties": {
                "competition_id": {
                    "type": "integer"
                },
                "group_ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "response.DeleteSuccessResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Delete ID(1) : sth delete success"
                }
            }
        },
        "response.ErrorIdResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "invalid ID(1) : sth error"
                }
            }
        },
        "response.ErrorInternalErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "sth need fix ID(1) : sth error"
                }
            }
        },
        "response.ErrorReceiveDataFormatResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "bad request data: sth error"
                }
            }
        },
        "response.ErrorReceiveDataNilResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "bad request data is nil ID(1): sth error"
                }
            }
        },
        "response.ErrorReceiveDataResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "bad request data ID(1): sth error"
                }
            }
        },
        "response.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "error description"
                }
            }
        },
        "response.Nill": {
            "type": "object"
        },
        "response.Response": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "result description"
                }
            }
        }
    },
    "tags": [
        {
            "name": "Session"
        },
        {
            "name": "User"
        },
        {
            "name": "Institution"
        },
        {
            "name": "Competition"
        },
        {
            "name": "Participant"
        },
        {
            "name": "GroupInfo"
        },
        {
            "name": "Qualification"
        },
        {
            "name": "Lane"
        },
        {
            "name": "Player"
        },
        {
            "name": "Elimination"
        },
        {
            "name": "PlayerSet"
        },
        {
            "name": "MatchResult"
        },
        {
            "name": "MatchEnd"
        },
        {
            "name": "MatchScore"
        },
        {
            "name": "Medal"
        },
        {
            "name": "OldLaneInfo"
        },
        {
            "name": "docs"
        }
    ]
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:80",
	BasePath:         "/api/",
	Schemes:          []string{},
	Title:            "Gin swagger",
	Description:      "Gin swagger",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
