// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "NYCUArchery",
            "url": "https://github.com/NYCUarchery"
        },
        "license": {
            "name": "no license yet"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/competition": {
            "post": {
                "description": "Post one new Competition data with new id, create UnassignedGroup, create Lanes and UnassignedLane which link to UnassignedGroup, and return the new Competition data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Competition"
                ],
                "summary": "Create one Competition and related data",
                "parameters": [
                    {
                        "description": "Competition",
                        "name": "Competition",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/competition/groups/players/rank/{id}": {
            "put": {
                "description": "Update update all  player ranking of different groups in one Competition",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Competition"
                ],
                "summary": "update one Competition Ranking",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Competition ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/competition/groups/players/{id}": {
            "get": {
                "description": "Get one Competition by id with GroupInfos and Players",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Competition"
                ],
                "summary": "Show one Competition with GroupInfos and Players",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Competition ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/competition/groups/{id}": {
            "get": {
                "description": "Get one Competition by id with GroupInfos",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Competition"
                ],
                "summary": "Show one Competition with GroupInfos",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Competition ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/competition/participants/{id}": {
            "get": {
                "description": "Get one Competition by id with Participants",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Competition"
                ],
                "summary": "Show one Competition with Participants",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Competition ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/competition/whole/{id}": {
            "put": {
                "description": "Put whole new Competition and overwrite with the id but without GroupInfo, cannot replace RoundNum, GroupNum, LaneNum, FirstLaneId, unassignedGroupId",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Competition"
                ],
                "summary": "update one Competition without GroupInfo",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Competition ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Competition",
                        "name": "Competition",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/competition/{id}": {
            "get": {
                "description": "Get one Competition by id without GroupInfo",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Competition"
                ],
                "summary": "Show one Competition without GroupInfo",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Competition ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "description": "delete one Competition by id, delete all related groups, lanes, players",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Competition"
                ],
                "summary": "delete one Competition",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Competition ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/groupinfo": {
            "post": {
                "description": "Post one new GroupInfo data with new id, create qualification with same id, and auto write GroupIndex",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "GroupInfo"
                ],
                "summary": "Create one GroupInfo",
                "parameters": [
                    {
                        "description": "LaneData",
                        "name": "GroupInfo",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/groupinfo/players/{id}": {
            "get": {
                "description": "Get one GroupInfo with players by id, usually ordered by rank",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "GroupInfo"
                ],
                "summary": "Show one GroupInfo with players",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "GroupInfo ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/groupinfo/reorder": {
            "put": {
                "description": "Put competition_id and group_ids to update GroupInfos Indexes under the same Competition",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "GroupInfo"
                ],
                "summary": "update GroupInfos Indexes under the same Competition",
                "parameters": [
                    {
                        "description": "GroupInfo IDs for reorder",
                        "name": "groupIdsForReorder",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/groupinfo/whole/{id}": {
            "put": {
                "description": "Put whole new GroupInfo and overwrite with the id, cannot overwrite CompetitionId",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "GroupInfo"
                ],
                "summary": "update one GroupInfo",
                "parameters": [
                    {
                        "type": "string",
                        "description": "GroupInfo ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "GroupInfo",
                        "name": "GroupInfo",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/groupinfo/{id}": {
            "get": {
                "description": "Get one GroupInfo by id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "GroupInfo"
                ],
                "summary": "Show one GroupInfo",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "LaneInfo ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "description": "delete one GroupInfo by id, delete qualification, and change player to UnassignedGroup and UnassignedLane",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "GroupInfo"
                ],
                "summary": "delete one GroupInfo",
                "parameters": [
                    {
                        "type": "string",
                        "description": "GroupInfo ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/lane/all/{id}": {
            "get": {
                "description": "Get all Lane by competition id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Lane"
                ],
                "summary": "Show all Lane of a competition",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "competition ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/lane/scores/{id}": {
            "get": {
                "description": "Get one Lane with players, rounds, roundends, roundscores by id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Lane"
                ],
                "summary": "Show one Lane with players, rounds, roundends, roundscores",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Lane ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/lane/{id}": {
            "get": {
                "description": "Get one Lane by id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Lane"
                ],
                "summary": "Show one Lane",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Lane ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/oldlaneinfo": {
            "post": {
                "description": "Post one new OldLaneInfo data with new id, and return the new OldLaneInfo data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "OldLaneInfo"
                ],
                "summary": "Create one OldLaneInfo",
                "parameters": [
                    {
                        "description": "LaneData",
                        "name": "LaneData",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/oldlaneinfo/confirm/{id}/{stageindex}/{userindex}/{confirm}": {
            "put": {
                "description": "Put one OldLaneInfo confirm by index and id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "OldLaneInfo"
                ],
                "summary": "update one OldLaneInfo confirmation",
                "parameters": [
                    {
                        "type": "string",
                        "description": "OldLaneInfo ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "OldLaneInfo stage index",
                        "name": "stageindex",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "OldLaneInfo user index of the stage",
                        "name": "userindex",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "confirmation of the user",
                        "name": "confirm",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/oldlaneinfo/score/{id}/{stageindex}/{userindex}/{arrowindex}/{score}": {
            "put": {
                "description": "Put one OldLaneInfo score by index and id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "OldLaneInfo"
                ],
                "summary": "update one OldLaneInfo Score",
                "parameters": [
                    {
                        "type": "string",
                        "description": "OldLaneInfo ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "OldLaneInfo stage index",
                        "name": "stageindex",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "OldLaneInfo user index of the stage",
                        "name": "userindex",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "OldLaneInfo arrow index of the user",
                        "name": "arrowindex",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "score of the arrow",
                        "name": "score",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/oldlaneinfo/whole/{id}": {
            "put": {
                "description": "Put whole new OldLaneInfo and overwrite with the id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "OldLaneInfo"
                ],
                "summary": "update one OldLaneInfo",
                "parameters": [
                    {
                        "type": "string",
                        "description": "OldLaneInfo ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "LaneData",
                        "name": "LaneData",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/oldlaneinfo/{id}": {
            "get": {
                "description": "Get one OldLaneInfo by id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "OldLaneInfo"
                ],
                "summary": "Show one OldLaneInfo",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "OldLaneInfo ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "description": "delete one OldLaneInfo by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "OldLaneInfo"
                ],
                "summary": "delete one OldLaneInfo",
                "parameters": [
                    {
                        "type": "string",
                        "description": "OldLaneInfo ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/participant": {
            "post": {
                "description": "Post one new Participant data with new id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Participant"
                ],
                "summary": "Create one Participant",
                "parameters": [
                    {
                        "description": "Participant",
                        "name": "Participant",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/participant/whole/{id}": {
            "put": {
                "description": "Put whole new Participant and overwrite with the id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Participant"
                ],
                "summary": "update one Participant",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Participant ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Participant",
                        "name": "Participant",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/participant/{id}": {
            "get": {
                "description": "Get One Participant By ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Participant"
                ],
                "summary": "Show One Participant By ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Participant ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "description": "delete one Participant by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Participant"
                ],
                "summary": "delete one Participant",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Participant ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/player/groupid/{playerid}/{groupid}": {
            "put": {
                "description": "Update one Player groupId by id, and change player laneid to Unassigned lane",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Player"
                ],
                "summary": "Update one Player groupId by id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Player ID",
                        "name": "playerid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/player/isconfirmed/{roundendid}": {
            "put": {
                "description": "Update one Player isConfirmed by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Player"
                ],
                "summary": "Update one Player isConfirmed by id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "RoundEnd ID",
                        "name": "roundendid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/player/laneid/{playerid}": {
            "put": {
                "description": "Update one Player laneId by id, update lane playernum",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Player"
                ],
                "summary": "Update one Player laneId by id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Player ID",
                        "name": "playerid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/player/order/{id}": {
            "put": {
                "description": "Update one Player order by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Player"
                ],
                "summary": "Update one Player order by id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Player ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/player/roundend": {
            "post": {
                "description": "Create one RoundEnd by round id, IsComfirmed is false",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Player"
                ],
                "summary": "Create one RoundEnd by Round ID",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/player/roundscore": {
            "post": {
                "description": "Create one RoundScore by roundend id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Player"
                ],
                "summary": "Create one RoundScore by RoundEnd ID",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/player/score/{roundscoreid}": {
            "put": {
                "description": "Update one Player score by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Player"
                ],
                "summary": "Update one Player score by id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "RoundScore ID",
                        "name": "roundscoreid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/player/scores/{id}": {
            "get": {
                "description": "Get one Player with rounds, roundends, roundscores by id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Player"
                ],
                "summary": "Show one Player with scores",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Player ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/player/shootoffscore/{id}": {
            "put": {
                "description": "Update one Player shootoffScore by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Player"
                ],
                "summary": "Update one Player shootoffScore by id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Player ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/player/{id}": {
            "get": {
                "description": "Get one Player without other data by id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Player"
                ],
                "summary": "Show one Player without other data",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Player ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete one Player by id, delete related round, roundend, roundscore data, and playerNum minus one in lane",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Player"
                ],
                "summary": "Delete one Player by id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Player ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/player/{participantid}": {
            "post": {
                "description": "Create one Player by participant id, create realeted rounds by laneNum of competition, create 6 roundscores for each 6 roundends, UnassignedLane playerNum ++",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Player"
                ],
                "summary": "Create one Player by Participant ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Participant ID",
                        "name": "participantid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/competition": {
            "get": {
                "description": "get information of all the competitions",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Competition"
                ],
                "summary": "get information of all the competitions",
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/database.Competition"
                            }
                        }
                    },
                    "500": {
                        "description": "internal db error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/data/qualification/lanes/Unassigned/{id}": {
            "get": {
                "description": "Get one Qualification with Unassigned Lanes by id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Qualification"
                ],
                "summary": "Show one Qualification",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Qualification ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/data/qualification/lanes/players/{id}": {
            "get": {
                "description": "Get one Qualification with Lanes and Players by id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Qualification"
                ],
                "summary": "Show one Qualification",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Qualification ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/data/qualification/lanes/{id}": {
            "get": {
                "description": "Get one Qualification with Lanes by id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Qualification"
                ],
                "summary": "Show one Qualification",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Qualification ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/data/qualification/whole/{id}": {
            "put": {
                "description": "Put whole new Qualification and overwrite with the id, and update lanes below it ,but cannot replace groupid",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Qualification"
                ],
                "summary": "update one Qualification",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Qualification ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Qualification",
                        "name": "Qualification",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/data/qualification/{id}": {
            "get": {
                "description": "Get one Qualification by id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Qualification"
                ],
                "summary": "Show one Qualification",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Qualification ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/institution": {
            "get": {
                "description": "get all institution info from db",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Institution"
                ],
                "summary": "get all institution info",
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/database.Institution"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "db error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "post": {
                "description": "add an institution to db",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Institution"
                ],
                "summary": "create an institution",
                "parameters": [
                    {
                        "type": "string",
                        "description": "institution's name",
                        "name": "name",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "empty institution name",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "db error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/institution/{id}": {
            "get": {
                "description": "get institution info from db by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Institution"
                ],
                "summary": "get institution info by id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "institution's id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/database.Institution"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "invalid id",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "404": {
                        "description": "no institution found",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/participant/": {
            "post": {
                "description": "add a particpant to the competition",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Participant"
                ],
                "summary": "join in a competition",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "competition id",
                        "name": "competitionID",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "no user/competition found",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "internal db error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/session": {
            "post": {
                "description": "get a session",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Session"
                ],
                "summary": "login",
                "parameters": [
                    {
                        "type": "string",
                        "description": "user's name",
                        "name": "username",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "password",
                        "name": "password",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success | has loginned",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "401": {
                        "description": "wrong username or password",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "delete": {
                "description": "delete the session",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Session"
                ],
                "summary": "logout",
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/swagger/doc.json": {
            "get": {
                "description": "get Api docs in json",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "docs"
                ],
                "summary": "Show Api Docs in json",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user": {
            "post": {
                "description": "add a user to db",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "register a user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "user's name",
                        "name": "username",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "password",
                        "name": "password",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "email",
                        "name": "email",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "overview",
                        "name": "overview",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "institution ID",
                        "name": "institutionID",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "a user object",
                        "schema": {
                            "$ref": "#/definitions/database.User"
                        }
                    },
                    "400": {
                        "description": "username/email exists | empty username/password/email/institutionID | invalid info",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "db error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/user/me": {
            "get": {
                "description": "get my uid in the session",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "get my uid",
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "id": {
                                            "type": "integer"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/user/{id}": {
            "get": {
                "description": "get a user's username, overview, and institution id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "get a user's information",
                "parameters": [
                    {
                        "type": "string",
                        "description": "user's id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.Response"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/database.User"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "empty/invalid user id",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "404": {
                        "description": "no user found",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            },
            "put": {
                "description": "modify username, password, overview, and institution_id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "modify user's information",
                "parameters": [
                    {
                        "type": "string",
                        "description": "user's id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "original password",
                        "name": "oriPassword",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "modified password",
                        "name": "modPassword",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "modified email",
                        "name": "email",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "modified overview",
                        "name": "overview",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "modified institution ID",
                        "name": "institutionID",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "empty/invalid user id | invalid modified information",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "403": {
                        "description": "cannot change other's info | wrong original password",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "internal db error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "database.Competition": {
            "type": "object",
            "properties": {
                "current_phase": {
                    "type": "integer"
                },
                "date": {
                    "type": "string"
                },
                "elimination_is_active": {
                    "type": "boolean"
                },
                "groups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/database.Group"
                    }
                },
                "groups_num": {
                    "type": "integer"
                },
                "host_id": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "lanes_num": {
                    "type": "integer"
                },
                "mixed_elimination_is_active": {
                    "type": "boolean"
                },
                "participants": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/database.Participant"
                    }
                },
                "qualification_is_active": {
                    "type": "boolean"
                },
                "rounds_num": {
                    "type": "integer"
                },
                "script": {
                    "type": "string"
                },
                "sub_title": {
                    "type": "string"
                },
                "team_elimination_is_active": {
                    "type": "boolean"
                },
                "title": {
                    "type": "string"
                },
                "unassigned_group_id": {
                    "type": "integer"
                },
                "unassigned_lane_id": {
                    "type": "integer"
                }
            }
        },
        "database.Group": {
            "type": "object",
            "properties": {
                "bow_type": {
                    "type": "string"
                },
                "competition_id": {
                    "type": "integer"
                },
                "group_index": {
                    "type": "integer"
                },
                "group_name": {
                    "type": "string"
                },
                "group_range": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "players": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/database.Player"
                    }
                }
            }
        },
        "database.Institution": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "database.Participant": {
            "type": "object",
            "properties": {
                "competitionID": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "role": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "userID": {
                    "type": "integer"
                }
            }
        },
        "database.Player": {
            "type": "object",
            "properties": {
                "group_id": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "lane_id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "order": {
                    "type": "integer"
                },
                "participant_id": {
                    "type": "integer"
                },
                "rank": {
                    "type": "integer"
                },
                "rounds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/database.Round"
                    }
                },
                "shoot_off_score": {
                    "type": "integer"
                },
                "total_score": {
                    "type": "integer"
                }
            }
        },
        "database.Round": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "player_id": {
                    "type": "integer"
                },
                "round_ends": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/database.RoundEnd"
                    }
                },
                "total_score": {
                    "type": "integer"
                }
            }
        },
        "database.RoundEnd": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "is_confirmed": {
                    "type": "boolean"
                },
                "round_id": {
                    "type": "integer"
                },
                "round_scores": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/database.RoundScore"
                    }
                }
            }
        },
        "database.RoundScore": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "round_end_id": {
                    "type": "integer"
                },
                "score": {
                    "type": "integer"
                }
            }
        },
        "database.User": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "institutionID": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "overview": {
                    "type": "string"
                }
            }
        },
        "response.Response": {
            "type": "object",
            "properties": {
                "result": {
                    "type": "string",
                    "example": "result description"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:6969",
	BasePath:         "/api/",
	Schemes:          []string{},
	Title:            "Gin swagger",
	Description:      "Gin swagger",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
