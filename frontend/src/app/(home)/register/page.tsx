"use client";
import { useState } from "react";

import { Card, CardContent } from "@mui/material";
import Box from "@mui/material/Box";
import Grid from "@mui/material/Grid2";
import Typography from "@mui/material/Typography";
import { Button } from "@mui/material";
import TextField from "@mui/material/TextField";
import InputAdornment from "@mui/material/InputAdornment";
import Visibility from "@mui/icons-material/Visibility";
import VisibilityOff from "@mui/icons-material/VisibilityOff";
import IconButton from "@mui/material/IconButton";
import MenuItem from "@mui/material/MenuItem";

import { useMutation, useQuery } from "react-query";
import { DatabaseInstitution } from "@/types/Api";
import { apiClient } from "@/utils/ApiClient";
import { useRouter } from "next/navigation";

// Generated by https://quicktype.io
export interface PostUserBody {
  user_name: string;
  real_name: string;
  password: string;
  email: string;
  institution_id: number;
  overview: string;
}

const SignupPage = () => {
  const router = useRouter();
  const [showPassword, setShowPassword] = useState(false);
  const [showPasswordConfirm, setShowPasswordConfirm] = useState(false);
  const [username, setUsername] = useState("");
  const [password, setPassword] = useState("");
  const [passwordConfirm, setPasswordConfirm] = useState("");
  const [realName, setRealName] = useState("");
  const [email, setEmail] = useState("");
  const [institutionID, setInstitutionID] = useState(0);
  const [overview, setOverview] = useState("");
  const { data: institutions } = useQuery(
    "institutions",
    apiClient.institution.institutionList,
    {
      staleTime: Infinity,
      select: (data) => data.data as DatabaseInstitution[],
    }
  );
  const isPasswordMatch =
    password === passwordConfirm || passwordConfirm === "";

  const { mutate: signup, isLoading: isLoadingSignup } = useMutation(
    apiClient.user.userCreate,
    {
      onSuccess: () => {
        router.push("/login");
      },
    }
  );

  const institutionsOptions = institutions?.map((institution: any) => {
    return { value: institution.id, label: institution.name };
  });

  const handleClickShowPassword = () => {
    setShowPassword(!showPassword);
  };

  const handleClickShowPasswordConfirm = () => {
    setShowPasswordConfirm(!showPasswordConfirm);
  };

  const handleMouseDownPassword = (e: any) => {
    e.preventDefault();
  };

  const handleMouseDownPasswordConfirm = (e: any) => {
    e.preventDefault();
  };

  const handleSignup = () => {
    if (password !== passwordConfirm) {
      alert("密碼不一致");
      return;
    }
    signup({
      user_name: username,
      real_name: realName,
      password: password,
      email: email,
      institution_id: institutionID,
      overview: overview,
    });
  };

  return (
    <Card sx={{ p: 2, mt: 2, width: "600px" }}>
      <CardContent sx={{ display: "flex", justifyContent: "center" }}>
        <Grid
          container
          direction="column"
          alignItems="center"
          justifyContent="center"
          spacing={2}
          sx={{ width: "300px" }}
        >
          <Grid size={12}>
            <Typography variant="h4" align="center">
              註冊
            </Typography>
          </Grid>
          <Grid>
            <TextField
              label="帳號"
              variant="outlined"
              value={username}
              onChange={(event) => {
                setUsername(event.target.value);
              }}
              sx={{ width: "250px" }}
            />
          </Grid>
          <Grid>
            <TextField
              label="密碼"
              variant="outlined"
              type={showPassword ? "text" : "password"}
              value={password}
              error={!isPasswordMatch}
              helperText={!isPasswordMatch ? "密碼不一致" : ""}
              onChange={(event) => {
                setPassword(event.target.value);
              }}
              sx={{ width: "250px" }}
              InputProps={{
                endAdornment: (
                  <InputAdornment position="end">
                    <IconButton
                      aria-label="toggle password visibility"
                      onClick={handleClickShowPassword}
                      onMouseDown={handleMouseDownPassword}
                      edge="end"
                    >
                      {showPassword ? <VisibilityOff /> : <Visibility />}
                    </IconButton>
                  </InputAdornment>
                ),
              }}
            />
          </Grid>
          <Grid>
            <TextField
              label="確認密碼"
              variant="outlined"
              type={showPasswordConfirm ? "text" : "password"}
              value={passwordConfirm}
              onChange={(event) => {
                setPasswordConfirm(event.target.value);
              }}
              error={!isPasswordMatch}
              helperText={!isPasswordMatch ? "密碼不一致" : ""}
              sx={{ width: "250px" }}
              InputProps={{
                endAdornment: (
                  <InputAdornment position="end">
                    <IconButton
                      aria-label="toggle password visibility"
                      onClick={handleClickShowPasswordConfirm}
                      onMouseDown={handleMouseDownPasswordConfirm}
                      edge="end"
                    >
                      {showPasswordConfirm ? <VisibilityOff /> : <Visibility />}
                    </IconButton>
                  </InputAdornment>
                ),
              }}
            />
          </Grid>
          <Grid>
            <TextField
              label="真實姓名"
              variant="outlined"
              value={realName}
              sx={{ width: "250px" }}
              onChange={(event) => {
                setRealName(event.target.value);
              }}
            />
          </Grid>
          <Grid>
            <TextField
              label="電子郵件"
              variant="outlined"
              value={email}
              sx={{ width: "250px" }}
              onChange={(event) => {
                setEmail(event.target.value);
              }}
            />
          </Grid>
          <Grid>
            <TextField
              label="組織/學校"
              variant="outlined"
              value={institutionID}
              select
              sx={{ width: "250px" }}
              onChange={(event) => {
                event.target.value === ""
                  ? setInstitutionID(0)
                  : setInstitutionID(parseInt(event.target.value));
              }}
            >
              <MenuItem value={0} key={0} disabled>
                選擇組織/學校
              </MenuItem>
              {institutionsOptions?.map((option: any) => (
                <MenuItem key={option.value} value={option.value}>
                  {option.label}
                </MenuItem>
              ))}
            </TextField>
          </Grid>
          <Grid>
            <TextField
              label="自我介紹"
              variant="outlined"
              value={overview}
              multiline
              rows={4}
              sx={{ width: "250px" }}
              onChange={(event) => {
                setOverview(event.target.value);
              }}
            />
          </Grid>
          <Grid>
            <Box sx={{ mb: "10px" }}>
              <Button
                disabled={isLoadingSignup}
                size="large"
                type="submit"
                variant="contained"
                color="secondary"
                onClick={handleSignup}
              >
                註冊
              </Button>
            </Box>
          </Grid>

          <Grid>
            <Typography
              variant="caption"
              component={Button}
              onClick={() => {
                router.push("/login");
              }}
              color="secondary"
              noWrap={true}
            >
              已有帳號
            </Typography>
          </Grid>
        </Grid>
      </CardContent>
    </Card>
  );
};

export default SignupPage;
